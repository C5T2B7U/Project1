/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package passwordvault;

import java.awt.CardLayout;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.security.KeyStoreException;
import java.security.UnrecoverableKeyException;
import javax.swing.JFileChooser;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import static passwordvault.Debug.debugMsg;
import static passwordvault.security.Hashing.getHash;
//import static passwordvault.security.Hashing.getCharHash;
//import static passwordvault.security.Hashing.getFileHash;
import passwordvault.security.vault.Vault;
import passwordvault.security.vault.VaultEntry;
import passwordvault.security.vault.VaultListModel;

/**
 *
 * @author Brian Sumner et al.
 * 
 * 
 * RESOURCES REFERENCED:
 * 
 * http://stackoverflow.com/questions/3213045/centering-text-in-a-jtextarea-or-jtextpane-horizontal-text-alignment#3213361
 * 
 * https://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html
 * 
 * http://www.rgagnon.com/javadetails/java-0370.html
 * 
 */
public class PasswordVaultUI extends javax.swing.JFrame
{

    /**
     * Creates new form PasswordVaultUI
     */
    public PasswordVaultUI()
    {
        debugMsg("INITIALIZING UI COMPONENTS");
        initComponents();
    }

    // DEFINE CUSTOM CLASS VARS
    private String goBackToCard = "panelBase";
    private String activeCard = "panelBase";
    private String vaultFilename = "";
    private boolean isVaultOpen = false;

    // USED FOR panelHome BUTTON CONFIRMATION STATES
    private boolean showConfirmUpdateEntry = false;
    private String updateButtonText = "Update Entry";
    private String updateButtonConfirmText = "Really Update Entry?";

    private boolean showConfirmDeleteEntry = false;
    private String deleteButtonText = "Delete Entry";
    private String deleteButtonConfirmText = "Really Delete Entry?";

    private boolean showConfirmSaveVault = false;
    private String saveButtonText = "Save Vault";
    private String saveButtonConfirmText = "Really Save Vault?";

    private boolean showConfirmCloseVault = false;
    private String closeButtonText = "Close Vault";
    private String closeButtonConfirmText = "Really Close Vault?";

    // REFERENCES TO VAULT AND VAULTLISTMODEL OBJECTS USED BY UI
    Vault vaultRef = null;
    VaultListModel vaultListModelRef = null;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(PasswordVaultUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(PasswordVaultUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(PasswordVaultUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(PasswordVaultUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new PasswordVaultUI().setVisible(true);
//                PasswordVault pwv = new PasswordVault();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jFileChooser = new javax.swing.JFileChooser();
        mainPanel = new javax.swing.JPanel();
        jPanelBase = new javax.swing.JPanel();
        jLabelBase = new javax.swing.JLabel();
        jPanelBaseButtons = new javax.swing.JPanel();
        jButtonBaseExit = new javax.swing.JButton();
        jButtonBaseNew = new javax.swing.JButton();
        jButtonBaseOpen = new javax.swing.JButton();
        jLabelBase1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabelBase5 = new javax.swing.JLabel();
        jLabelBase4 = new javax.swing.JLabel();
        jLabelBase3 = new javax.swing.JLabel();
        jLabelBase2 = new javax.swing.JLabel();
        panelNew = new javax.swing.JPanel();
        jPanelNewText = new javax.swing.JPanel();
        jLabelNewName = new javax.swing.JLabel();
        jTextFieldNewName = new javax.swing.JTextField();
        jLabelNewPath = new javax.swing.JLabel();
        jTextFieldNewPath = new javax.swing.JTextField();
        jPanelNewButtons = new javax.swing.JPanel();
        jButtonNewCancel = new javax.swing.JButton();
        jButtonNewDir = new javax.swing.JButton();
        jButtonNewSubmit = new javax.swing.JButton();
        panelLoad = new javax.swing.JPanel();
        jPanelLoadText = new javax.swing.JPanel();
        jLabelLoadTextName = new javax.swing.JLabel();
        jTextFieldLoadTextName = new javax.swing.JTextField();
        jLabelLoadTextPath = new javax.swing.JLabel();
        jTextFieldLoadTextPath = new javax.swing.JTextField();
        jPanelLoadButtons = new javax.swing.JPanel();
        jButtonLoadCancel = new javax.swing.JButton();
        jButtonLoadName = new javax.swing.JButton();
        jButtonLoadSubmit = new javax.swing.JButton();
        panelAuth = new javax.swing.JPanel();
        jPanelAuthButtons = new javax.swing.JPanel();
        jButtonAuthCancel = new javax.swing.JButton();
        jButtonAuthChooseKeyfile = new javax.swing.JButton();
        jButtonAuthSubmit = new javax.swing.JButton();
        jPanelAuthText = new javax.swing.JPanel();
        jLabelAuthPW = new javax.swing.JLabel();
        jPasswordFieldAuthPW = new javax.swing.JPasswordField();
        jLabelAuthKeyfilePath = new javax.swing.JLabel();
        jTextFieldAuthKeyfilePath = new javax.swing.JTextField();
        jCheckBoxAuthUseKeyfile = new javax.swing.JCheckBox();
        panelFail = new javax.swing.JPanel();
        jLabelFailReason = new javax.swing.JLabel();
        jButtonFail = new javax.swing.JButton();
        panelHome = new javax.swing.JPanel();
        jPanelHomeButtons = new javax.swing.JPanel();
        jButtonHomeAdd = new javax.swing.JButton();
        jButtonHomeUpdate = new javax.swing.JButton();
        jButtonHomeDelete = new javax.swing.JButton();
        jButtonHomeSave = new javax.swing.JButton();
        jButtonHomeClose = new javax.swing.JButton();
        jPanelHomeTextFields = new javax.swing.JPanel();
        jLabelHomeEntryLabel = new javax.swing.JLabel();
        jTextFieldHomeEntryLabel = new javax.swing.JTextField();
        jLabelHomeEntryUsername = new javax.swing.JLabel();
        jTextFieldHomeEntryUsername = new javax.swing.JTextField();
        jLabelHomeEntryPW = new javax.swing.JLabel();
        jTextFieldHomeEntryPW = new javax.swing.JTextField();
        jScrollPaneHomeEntryList = new javax.swing.JScrollPane();
        jListHomeEntryList = new javax.swing.JList<>();
        jLabelHomeEntryList = new javax.swing.JLabel();
        panelSaveAs = new javax.swing.JPanel();
        jPanelSaveAsText = new javax.swing.JPanel();
        jLabelSaveAsTextName = new javax.swing.JLabel();
        jTextFieldSaveAsName = new javax.swing.JTextField();
        jLabelSaveAsTextPath = new javax.swing.JLabel();
        jTextFieldSaveAsPath = new javax.swing.JTextField();
        jPanelSaveAsButtons = new javax.swing.JPanel();
        jButtonSaveAsCancel = new javax.swing.JButton();
        jButtonSaveAsDir = new javax.swing.JButton();
        jButtonSaveAsName = new javax.swing.JButton();
        jButtonSaveAsSubmit = new javax.swing.JButton();
        panelInfo = new javax.swing.JPanel();
        jPanelInfoButtons = new javax.swing.JPanel();
        jButtonInfoBack = new javax.swing.JButton();
        jScrollPaneInfo = new javax.swing.JScrollPane();
        jTextPaneInfo = new javax.swing.JTextPane();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemFileOpen = new javax.swing.JMenuItem();
        jMenuItemSave = new javax.swing.JMenuItem();
        jMenuItemSaveAs = new javax.swing.JMenuItem();
        jMenuItemFileClose = new javax.swing.JMenuItem();
        jSeparatorMenuFile1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemFileChPw = new javax.swing.JMenuItem();
        jSeparatorMenuFile2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemFileExit = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItemHelpHelp = new javax.swing.JMenuItem();
        jSeparatorMenuHelp1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemHelpAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("LoginSecrets:  Secure Password Vault");
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                exitProgramEvent(evt);
            }
        });

        mainPanel.setLayout(new java.awt.CardLayout());

        jLabelBase.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabelBase.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelBase.setText("Welcome to LoginSecrets");

        jButtonBaseExit.setText("Exit Program");
        jButtonBaseExit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonBaseExitActionPerformed(evt);
            }
        });

        jButtonBaseNew.setText("Create New Vault");
        jButtonBaseNew.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonBaseNewActionPerformed(evt);
            }
        });

        jButtonBaseOpen.setText("Open Existing Vault");
        jButtonBaseOpen.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonBaseOpenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelBaseButtonsLayout = new javax.swing.GroupLayout(jPanelBaseButtons);
        jPanelBaseButtons.setLayout(jPanelBaseButtonsLayout);
        jPanelBaseButtonsLayout.setHorizontalGroup(
            jPanelBaseButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBaseButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonBaseExit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(jButtonBaseNew)
                .addGap(26, 26, 26)
                .addComponent(jButtonBaseOpen)
                .addContainerGap())
        );
        jPanelBaseButtonsLayout.setVerticalGroup(
            jPanelBaseButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBaseButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBaseButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonBaseExit)
                    .addComponent(jButtonBaseNew)
                    .addComponent(jButtonBaseOpen))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabelBase1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabelBase1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelBase1.setText("Secure Password Vault");

        jLabelBase5.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabelBase5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelBase5.setText("after using LoginSecrets!");

        jLabelBase4.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabelBase4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelBase4.setText("please reboot the computer");

        jLabelBase3.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabelBase3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelBase3.setText("For maximum protection,");

        jLabelBase2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabelBase2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelBase2.setText("IMPORTANT NOTE:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelBase5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabelBase4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabelBase3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabelBase2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelBase2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jLabelBase3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelBase4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelBase5)
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout jPanelBaseLayout = new javax.swing.GroupLayout(jPanelBase);
        jPanelBase.setLayout(jPanelBaseLayout);
        jPanelBaseLayout.setHorizontalGroup(
            jPanelBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelBaseButtons, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanelBaseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelBase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelBase1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBaseLayout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanelBaseLayout.setVerticalGroup(
            jPanelBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBaseLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jLabelBase)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelBase1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(jPanelBaseButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        mainPanel.add(jPanelBase, "panelBase");

        jLabelNewName.setText(" New Vault Filename:");

        jTextFieldNewName.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jTextFieldNewNameActionPerformed(evt);
            }
        });

        jLabelNewPath.setText(" New Vault Directory Path:");

        jTextFieldNewPath.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jTextFieldNewPathActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelNewTextLayout = new javax.swing.GroupLayout(jPanelNewText);
        jPanelNewText.setLayout(jPanelNewTextLayout);
        jPanelNewTextLayout.setHorizontalGroup(
            jPanelNewTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelNewTextLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelNewTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelNewPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldNewName, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldNewPath, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelNewName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelNewTextLayout.setVerticalGroup(
            jPanelNewTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNewTextLayout.createSequentialGroup()
                .addComponent(jLabelNewName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldNewName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelNewPath)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldNewPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jButtonNewCancel.setText("Cancel");
        jButtonNewCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonNewCancelActionPerformed(evt);
            }
        });

        jButtonNewDir.setText("Choose Directory for New Vault");
        jButtonNewDir.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonNewDirActionPerformed(evt);
            }
        });

        jButtonNewSubmit.setText("Submit");
        jButtonNewSubmit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonNewSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelNewButtonsLayout = new javax.swing.GroupLayout(jPanelNewButtons);
        jPanelNewButtons.setLayout(jPanelNewButtonsLayout);
        jPanelNewButtonsLayout.setHorizontalGroup(
            jPanelNewButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNewButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonNewCancel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(jButtonNewDir)
                .addGap(42, 42, 42)
                .addComponent(jButtonNewSubmit)
                .addContainerGap())
        );
        jPanelNewButtonsLayout.setVerticalGroup(
            jPanelNewButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelNewButtonsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelNewButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNewCancel)
                    .addComponent(jButtonNewSubmit)
                    .addComponent(jButtonNewDir))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelNewLayout = new javax.swing.GroupLayout(panelNew);
        panelNew.setLayout(panelNewLayout);
        panelNewLayout.setHorizontalGroup(
            panelNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNewLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelNewText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanelNewButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelNewLayout.setVerticalGroup(
            panelNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNewLayout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(jPanelNewText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 180, Short.MAX_VALUE)
                .addComponent(jPanelNewButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        mainPanel.add(panelNew, "panelNew");

        jLabelLoadTextName.setText(" Existing Vault Filename:");

        jTextFieldLoadTextName.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jTextFieldLoadTextNameActionPerformed(evt);
            }
        });

        jLabelLoadTextPath.setText(" Existing Vault Directory Path:");

        javax.swing.GroupLayout jPanelLoadTextLayout = new javax.swing.GroupLayout(jPanelLoadText);
        jPanelLoadText.setLayout(jPanelLoadTextLayout);
        jPanelLoadTextLayout.setHorizontalGroup(
            jPanelLoadTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLoadTextLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLoadTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelLoadTextPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldLoadTextPath, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldLoadTextName)
                    .addComponent(jLabelLoadTextName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelLoadTextLayout.setVerticalGroup(
            jPanelLoadTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLoadTextLayout.createSequentialGroup()
                .addComponent(jLabelLoadTextName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextFieldLoadTextName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelLoadTextPath)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldLoadTextPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7))
        );

        jButtonLoadCancel.setText("Cancel");
        jButtonLoadCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonLoadCancelActionPerformed(evt);
            }
        });

        jButtonLoadName.setText("Choose Filename of Existing Vault");
        jButtonLoadName.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonLoadNameActionPerformed(evt);
            }
        });

        jButtonLoadSubmit.setText("Submit");
        jButtonLoadSubmit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonLoadSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelLoadButtonsLayout = new javax.swing.GroupLayout(jPanelLoadButtons);
        jPanelLoadButtons.setLayout(jPanelLoadButtonsLayout);
        jPanelLoadButtonsLayout.setHorizontalGroup(
            jPanelLoadButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLoadButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonLoadCancel)
                .addGap(39, 39, 39)
                .addComponent(jButtonLoadName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(jButtonLoadSubmit)
                .addContainerGap())
        );
        jPanelLoadButtonsLayout.setVerticalGroup(
            jPanelLoadButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLoadButtonsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelLoadButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonLoadCancel)
                    .addComponent(jButtonLoadSubmit)
                    .addComponent(jButtonLoadName))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelLoadLayout = new javax.swing.GroupLayout(panelLoad);
        panelLoad.setLayout(panelLoadLayout);
        panelLoadLayout.setHorizontalGroup(
            panelLoadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLoadLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelLoadText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanelLoadButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelLoadLayout.setVerticalGroup(
            panelLoadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLoadLayout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(jPanelLoadText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 174, Short.MAX_VALUE)
                .addComponent(jPanelLoadButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        mainPanel.add(panelLoad, "panelLoad");

        jButtonAuthCancel.setText("Cancel");
        jButtonAuthCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonAuthCancelActionPerformed(evt);
            }
        });

        jButtonAuthChooseKeyfile.setText("Choose Keyfile");
        jButtonAuthChooseKeyfile.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonAuthChooseKeyfileActionPerformed(evt);
            }
        });

        jButtonAuthSubmit.setText("Submit");
        jButtonAuthSubmit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonAuthSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelAuthButtonsLayout = new javax.swing.GroupLayout(jPanelAuthButtons);
        jPanelAuthButtons.setLayout(jPanelAuthButtonsLayout);
        jPanelAuthButtonsLayout.setHorizontalGroup(
            jPanelAuthButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelAuthButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonAuthCancel)
                .addGap(77, 77, 77)
                .addComponent(jButtonAuthChooseKeyfile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addComponent(jButtonAuthSubmit)
                .addContainerGap())
        );
        jPanelAuthButtonsLayout.setVerticalGroup(
            jPanelAuthButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelAuthButtonsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelAuthButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAuthSubmit)
                    .addComponent(jButtonAuthCancel)
                    .addComponent(jButtonAuthChooseKeyfile))
                .addContainerGap())
        );

        jLabelAuthPW.setText(" Enter Password:");

        jLabelAuthKeyfilePath.setText("Keyfile Path:");

        jCheckBoxAuthUseKeyfile.setSelected(true);
        jCheckBoxAuthUseKeyfile.setText("Use Keyfile for Two-Factor Authentication");

        javax.swing.GroupLayout jPanelAuthTextLayout = new javax.swing.GroupLayout(jPanelAuthText);
        jPanelAuthText.setLayout(jPanelAuthTextLayout);
        jPanelAuthTextLayout.setHorizontalGroup(
            jPanelAuthTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAuthTextLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAuthTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldAuthKeyfilePath, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPasswordFieldAuthPW, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelAuthPW, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelAuthKeyfilePath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxAuthUseKeyfile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelAuthTextLayout.setVerticalGroup(
            jPanelAuthTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAuthTextLayout.createSequentialGroup()
                .addComponent(jLabelAuthPW)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPasswordFieldAuthPW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelAuthKeyfilePath)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldAuthKeyfilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxAuthUseKeyfile)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelAuthLayout = new javax.swing.GroupLayout(panelAuth);
        panelAuth.setLayout(panelAuthLayout);
        panelAuthLayout.setHorizontalGroup(
            panelAuthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelAuthButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelAuthLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelAuthText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelAuthLayout.setVerticalGroup(
            panelAuthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAuthLayout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(jPanelAuthText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 145, Short.MAX_VALUE)
                .addComponent(jPanelAuthButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        mainPanel.add(panelAuth, "panelAuth");

        jLabelFailReason.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelFailReason.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelFailReason.setText("...");

        jButtonFail.setText("Go Back");
        jButtonFail.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        jButtonFail.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonFail.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonFailActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelFailLayout = new javax.swing.GroupLayout(panelFail);
        panelFail.setLayout(panelFailLayout);
        panelFailLayout.setHorizontalGroup(
            panelFailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFailLayout.createSequentialGroup()
                .addGap(175, 175, 175)
                .addComponent(jButtonFail)
                .addContainerGap(174, Short.MAX_VALUE))
            .addGroup(panelFailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFailLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabelFailReason, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        panelFailLayout.setVerticalGroup(
            panelFailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFailLayout.createSequentialGroup()
                .addContainerGap(289, Short.MAX_VALUE)
                .addComponent(jButtonFail)
                .addGap(89, 89, 89))
            .addGroup(panelFailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFailLayout.createSequentialGroup()
                    .addContainerGap(192, Short.MAX_VALUE)
                    .addComponent(jLabelFailReason)
                    .addContainerGap(192, Short.MAX_VALUE)))
        );

        mainPanel.add(panelFail, "panelFail");

        jButtonHomeAdd.setText("Add Entry");
        jButtonHomeAdd.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonHomeAddActionPerformed(evt);
            }
        });

        jButtonHomeUpdate.setText("Update Entry");
        jButtonHomeUpdate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonHomeUpdateActionPerformed(evt);
            }
        });

        jButtonHomeDelete.setText("Delete Entry");
        jButtonHomeDelete.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonHomeDeleteActionPerformed(evt);
            }
        });

        jButtonHomeSave.setText("Save Vault");
        jButtonHomeSave.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonHomeSaveActionPerformed(evt);
            }
        });

        jButtonHomeClose.setText("Close Vault");
        jButtonHomeClose.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonHomeCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelHomeButtonsLayout = new javax.swing.GroupLayout(jPanelHomeButtons);
        jPanelHomeButtons.setLayout(jPanelHomeButtonsLayout);
        jPanelHomeButtonsLayout.setHorizontalGroup(
            jPanelHomeButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHomeButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelHomeButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonHomeClose, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonHomeUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonHomeAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonHomeSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonHomeDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelHomeButtonsLayout.setVerticalGroup(
            jPanelHomeButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHomeButtonsLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jButtonHomeAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jButtonHomeUpdate)
                .addGap(18, 18, 18)
                .addComponent(jButtonHomeDelete)
                .addGap(18, 18, 18)
                .addComponent(jButtonHomeSave)
                .addGap(18, 18, 18)
                .addComponent(jButtonHomeClose)
                .addContainerGap())
        );

        jLabelHomeEntryLabel.setText(" Vault Entry Label:");

        jLabelHomeEntryUsername.setText(" Vault Entry Account Username:");

        jLabelHomeEntryPW.setText(" Vault Entry Account Password:");

        javax.swing.GroupLayout jPanelHomeTextFieldsLayout = new javax.swing.GroupLayout(jPanelHomeTextFields);
        jPanelHomeTextFields.setLayout(jPanelHomeTextFieldsLayout);
        jPanelHomeTextFieldsLayout.setHorizontalGroup(
            jPanelHomeTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextFieldHomeEntryPW)
            .addComponent(jTextFieldHomeEntryUsername)
            .addComponent(jTextFieldHomeEntryLabel)
            .addComponent(jLabelHomeEntryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabelHomeEntryUsername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabelHomeEntryPW, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanelHomeTextFieldsLayout.setVerticalGroup(
            jPanelHomeTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHomeTextFieldsLayout.createSequentialGroup()
                .addComponent(jLabelHomeEntryLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldHomeEntryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelHomeEntryUsername)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldHomeEntryUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelHomeEntryPW)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldHomeEntryPW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jListHomeEntryList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListHomeEntryList.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                jListHomeEntryListValueChanged(evt);
            }
        });
        jScrollPaneHomeEntryList.setViewportView(jListHomeEntryList);

        jLabelHomeEntryList.setText(" Vault Entries:");

        javax.swing.GroupLayout panelHomeLayout = new javax.swing.GroupLayout(panelHome);
        panelHome.setLayout(panelHomeLayout);
        panelHomeLayout.setHorizontalGroup(
            panelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHomeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelHomeLayout.createSequentialGroup()
                        .addComponent(jPanelHomeTextFields, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(panelHomeLayout.createSequentialGroup()
                        .addGroup(panelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneHomeEntryList, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
                            .addGroup(panelHomeLayout.createSequentialGroup()
                                .addComponent(jLabelHomeEntryList)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelHomeButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        panelHomeLayout.setVerticalGroup(
            panelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelHomeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelHomeTextFields, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelHomeButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelHomeLayout.createSequentialGroup()
                        .addComponent(jLabelHomeEntryList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneHomeEntryList)
                        .addContainerGap())))
        );

        mainPanel.add(panelHome, "panelHome");

        jLabelSaveAsTextName.setText("Save As Vault Filename:");

        jTextFieldSaveAsName.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jTextFieldSaveAsNameActionPerformed(evt);
            }
        });

        jLabelSaveAsTextPath.setText("Save As Vault Directory Path:");

        javax.swing.GroupLayout jPanelSaveAsTextLayout = new javax.swing.GroupLayout(jPanelSaveAsText);
        jPanelSaveAsText.setLayout(jPanelSaveAsTextLayout);
        jPanelSaveAsTextLayout.setHorizontalGroup(
            jPanelSaveAsTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSaveAsTextLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSaveAsTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldSaveAsPath)
                    .addComponent(jLabelSaveAsTextPath, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldSaveAsName, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelSaveAsTextName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelSaveAsTextLayout.setVerticalGroup(
            jPanelSaveAsTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSaveAsTextLayout.createSequentialGroup()
                .addComponent(jLabelSaveAsTextName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldSaveAsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelSaveAsTextPath)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldSaveAsPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonSaveAsCancel.setText("Cancel");
        jButtonSaveAsCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonSaveAsCancelActionPerformed(evt);
            }
        });

        jButtonSaveAsDir.setText("Choose Directory");
        jButtonSaveAsDir.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonSaveAsDirActionPerformed(evt);
            }
        });

        jButtonSaveAsName.setText("Choose Filename");
        jButtonSaveAsName.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonSaveAsNameActionPerformed(evt);
            }
        });

        jButtonSaveAsSubmit.setText("Submit");
        jButtonSaveAsSubmit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonSaveAsSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelSaveAsButtonsLayout = new javax.swing.GroupLayout(jPanelSaveAsButtons);
        jPanelSaveAsButtons.setLayout(jPanelSaveAsButtonsLayout);
        jPanelSaveAsButtonsLayout.setHorizontalGroup(
            jPanelSaveAsButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSaveAsButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonSaveAsCancel)
                .addGap(18, 18, 18)
                .addComponent(jButtonSaveAsDir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonSaveAsName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jButtonSaveAsSubmit)
                .addContainerGap())
        );
        jPanelSaveAsButtonsLayout.setVerticalGroup(
            jPanelSaveAsButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelSaveAsButtonsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelSaveAsButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSaveAsCancel)
                    .addComponent(jButtonSaveAsSubmit)
                    .addComponent(jButtonSaveAsDir)
                    .addComponent(jButtonSaveAsName))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelSaveAsLayout = new javax.swing.GroupLayout(panelSaveAs);
        panelSaveAs.setLayout(panelSaveAsLayout);
        panelSaveAsLayout.setHorizontalGroup(
            panelSaveAsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelSaveAsButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelSaveAsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelSaveAsText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelSaveAsLayout.setVerticalGroup(
            panelSaveAsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSaveAsLayout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(jPanelSaveAsText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 168, Short.MAX_VALUE)
                .addComponent(jPanelSaveAsButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        mainPanel.add(panelSaveAs, "panelSaveAs");

        jButtonInfoBack.setText("Go Back");
        jButtonInfoBack.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        jButtonInfoBack.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonInfoBack.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonInfoBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelInfoButtonsLayout = new javax.swing.GroupLayout(jPanelInfoButtons);
        jPanelInfoButtons.setLayout(jPanelInfoButtonsLayout);
        jPanelInfoButtonsLayout.setHorizontalGroup(
            jPanelInfoButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInfoButtonsLayout.createSequentialGroup()
                .addGap(171, 171, 171)
                .addComponent(jButtonInfoBack)
                .addContainerGap(178, Short.MAX_VALUE))
        );
        jPanelInfoButtonsLayout.setVerticalGroup(
            jPanelInfoButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInfoButtonsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonInfoBack)
                .addContainerGap())
        );

        jTextPaneInfo.setBorder(null);
        jTextPaneInfo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextPaneInfo.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTextPaneInfo.setFocusable(false);
        jScrollPaneInfo.setViewportView(jTextPaneInfo);

        javax.swing.GroupLayout panelInfoLayout = new javax.swing.GroupLayout(panelInfo);
        panelInfo.setLayout(panelInfoLayout);
        panelInfoLayout.setHorizontalGroup(
            panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelInfoButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelInfoLayout.setVerticalGroup(
            panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelInfoButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        mainPanel.add(panelInfo, "panelInfo");

        jMenuFile.setText("File");

        jMenuItemFileOpen.setText("Open Vault");
        jMenuItemFileOpen.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemFileOpenActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemFileOpen);

        jMenuItemSave.setText("Save Vault");
        jMenuItemSave.setEnabled(false);
        jMenuItemSave.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemSaveActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSave);

        jMenuItemSaveAs.setText("Save Vault As...");
        jMenuItemSaveAs.setEnabled(false);
        jMenuItemSaveAs.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemSaveAsActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSaveAs);

        jMenuItemFileClose.setText("Close Vault");
        jMenuItemFileClose.setEnabled(false);
        jMenuItemFileClose.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemFileCloseActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemFileClose);
        jMenuFile.add(jSeparatorMenuFile1);

        jMenuItemFileChPw.setText("Change Password");
        jMenuItemFileChPw.setEnabled(false);
        jMenuItemFileChPw.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemFileChPwActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemFileChPw);
        jMenuFile.add(jSeparatorMenuFile2);

        jMenuItemFileExit.setText("Exit Immediately!");
        jMenuItemFileExit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemFileExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemFileExit);

        jMenuBar.add(jMenuFile);

        jMenuHelp.setText("Help");

        jMenuItemHelpHelp.setText("Help");
        jMenuItemHelpHelp.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemHelpHelpActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemHelpHelp);
        jMenuHelp.add(jSeparatorMenuHelp1);

        jMenuItemHelpAbout.setText("About");
        jMenuItemHelpAbout.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemHelpAboutActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemHelpAbout);

        jMenuBar.add(jMenuHelp);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemFileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFileExitActionPerformed
        // TODO add your handling code here:
        debugMsg("EXITING FROM MENU ITEM");
        exitProgram();
    }//GEN-LAST:event_jMenuItemFileExitActionPerformed

    private void exitProgramEvent(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitProgramEvent
        // TODO add your handling code here:
        debugMsg("EXITING FROM WINDOW EVENT");
        exitProgram();
    }//GEN-LAST:event_exitProgramEvent

    private void jButtonBaseExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBaseExitActionPerformed
        // TODO add your handling code here:
        debugMsg("EXITING FROM panelBase EXIT BUTTON");
        exitProgram();
    }//GEN-LAST:event_jButtonBaseExitActionPerformed

    private void jButtonBaseNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBaseNewActionPerformed
        // TODO add your handling code here:
        debugMsg("panelBase:  CREATE NEW VAULT BUTTON PRESSED");
        changeCard("panelNew", "panelBase");
    }//GEN-LAST:event_jButtonBaseNewActionPerformed

    private void jButtonBaseOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBaseOpenActionPerformed
        // TODO add your handling code here:
        debugMsg("panelBase:  OPEN EXISTING VAULT BUTTON PRESSED");
        changeCard("panelLoad", "panelBase");
    }//GEN-LAST:event_jButtonBaseOpenActionPerformed

    private void jTextFieldLoadTextNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldLoadTextNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldLoadTextNameActionPerformed

    private void jButtonFailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFailActionPerformed
        // TODO add your handling code here:
        debugMsg("FAILURE ACCEPTED");
        changeCard(goBackToCard);
    }//GEN-LAST:event_jButtonFailActionPerformed

    private void jMenuItemFileCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFileCloseActionPerformed
        debugMsg("CLOSING VAULT FROM MENU ITEM");
        closeVault();
        changeCard("panelBase");
    }//GEN-LAST:event_jMenuItemFileCloseActionPerformed

    private void jButtonAuthSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAuthSubmitActionPerformed
        // TODO add your handling code here:

        try
        {
            // DETERMINE IF KEYFILE IS INVALID
            if (jCheckBoxAuthUseKeyfile.isSelected())
            {
                // THROW EXCEPTION IF FILE INVALID
                File file = new File(jTextFieldAuthKeyfilePath.getText());
                FileInputStream keyFile = new FileInputStream(file);

                keyFile.close();
            }
            
            // RUN IF NO KEYFILE EXCEPTION
            if (isVaultOpen)
            {
                if (jCheckBoxAuthUseKeyfile.isSelected())
                {
                    // SET NEW PASSWORD WITH KEYFILE
                    vaultRef.setPassword(getHash(jPasswordFieldAuthPW.getPassword(), jTextFieldAuthKeyfilePath.getText()));
                }
                else
                {
                    // SET NEW PASSWORD WITHOUT KEYFILE
                    vaultRef.setPassword(getHash(jPasswordFieldAuthPW.getPassword()));
                }
                changeCard(goBackToCard);
            }
            else
            {
                // VAULT NOT YET OPEN
                tryOpenVault();                
            }
        }
        catch (IOException ex)
        {
            showFailure("panelAuth:  KEYFILE ERROR", "panelAuth");
            debugMsg("panelAuth:  KEYFILE ERROR:  "); // + jTextFieldAuthKeyfilePath.getText());
        }

        
    }//GEN-LAST:event_jButtonAuthSubmitActionPerformed

    private void jButtonAuthCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAuthCancelActionPerformed
        debugMsg("panelAuth:  CANCELLING AUTHENTICATION");
        // RESET ALL
        resetAll();
        
        // GO BACK
        changeCard("panelBase");
    }//GEN-LAST:event_jButtonAuthCancelActionPerformed

    private void jMenuItemFileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFileOpenActionPerformed
        resetAll();
        changeCard("panelBase");
    }//GEN-LAST:event_jMenuItemFileOpenActionPerformed

    private void jButtonAuthChooseKeyfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAuthChooseKeyfileActionPerformed
        jFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jFileChooser.setAcceptAllFileFilterUsed(true);

        int returnVal = jFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            File file = jFileChooser.getSelectedFile();
            String keyFilePath = file.getAbsolutePath();
            jTextFieldAuthKeyfilePath.setText(keyFilePath);
        }
        else
        {
            debugMsg("panelAuth:  KEYFILE SELECTION CANCELLED");
        }
    }//GEN-LAST:event_jButtonAuthChooseKeyfileActionPerformed

    private void jButtonHomeAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHomeAddActionPerformed
        // TODO add your handling code here:
//        try {
        debugMsg("ADDING NEW ITEM");

        String newLabel = new String(jTextFieldHomeEntryLabel.getText());
        String newUsername = new String(jTextFieldHomeEntryUsername.getText());
        String newPW = new String(jTextFieldHomeEntryPW.getText());

        if (jTextFieldHomeEntryLabel.getText().length() < 1)
        {
            newLabel = "[NO LABEL ENTERED]";
            jTextFieldHomeEntryLabel.setText(newLabel);
        }

        if (jTextFieldHomeEntryUsername.getText().length() < 1)
        {
            newUsername = "[NO USERNAME ENTERED]";
            jTextFieldHomeEntryUsername.setText(newUsername);
        }

        if (jTextFieldHomeEntryPW.getText().length() < 1)
        {
            newPW = "[NO PASSWORD ENTERED]";
            jTextFieldHomeEntryPW.setText(newPW);
        }
        
        VaultEntry entry = new VaultEntry(
                vaultRef,
                newLabel,
                newUsername,
                newPW
        );

        jListHomeEntryList.setSelectedIndex(vaultListModelRef.getSize() - 1);
        
        resetPanelHomeButtons();
        
//        } catch (ArrayIndexOutOfBoundsException ex) {
//            debugMsg("INDEX ERROR:  " + jListHomeEntryList.getSelectedIndex());
//        }

    }//GEN-LAST:event_jButtonHomeAddActionPerformed

    private void jButtonHomeCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHomeCloseActionPerformed
        // TODO add your handling code here:
            if (!showConfirmCloseVault)
            {
                resetUpdateButton();
                resetDeleteButton();
                resetSaveButton();
                
                showConfirmCloseVault = true;
                jButtonHomeClose.setText(closeButtonConfirmText);
            }
            else
            {
                resetPanelHomeButtons();
                closeVault();
            }
    }//GEN-LAST:event_jButtonHomeCloseActionPerformed

    private void jListHomeEntryListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListHomeEntryListValueChanged
        // TODO add your handling code here:
        try
        {
            debugMsg("SELECTED ITEM:  " + jListHomeEntryList.getSelectedIndex());
            VaultEntry entry = (VaultEntry) vaultListModelRef.getElementAt(jListHomeEntryList.getSelectedIndex());

            jTextFieldHomeEntryLabel.setText(entry.getLabel());
            jTextFieldHomeEntryUsername.setText(entry.getUsername());
            jTextFieldHomeEntryPW.setText(entry.getPasswordAsStr());
            

        }
        catch (ArrayIndexOutOfBoundsException ex)
        {
            resetHomeCard();
            debugMsg("INDEX ERROR:  " + jListHomeEntryList.getSelectedIndex());
        }
        
        resetPanelHomeButtons();
    }//GEN-LAST:event_jListHomeEntryListValueChanged

    private void jMenuItemFileChPwActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFileChPwActionPerformed
        // TODO add your handling code here:
        resetPanelHomeButtons();
        changePassword();
    }//GEN-LAST:event_jMenuItemFileChPwActionPerformed

    private void jButtonLoadCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadCancelActionPerformed
        // TODO add your handling code here:
        resetLoadCard();
        changeCard("panelBase");
    }//GEN-LAST:event_jButtonLoadCancelActionPerformed

    private void jButtonLoadSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadSubmitActionPerformed
        
        try
        {
            // THROW EXCEPTION IF FILE INVALID
            vaultFilename = (jTextFieldLoadTextPath.getText() + File.separator + jTextFieldLoadTextName.getText());
            
            File file = new File(vaultFilename);
            FileInputStream vaultFile = new FileInputStream(file);

            // RUN ONLY IF FILE EXISTS AND CAN BE OPENED
            vaultFile.close();    
            changeCard("panelAuth", "panelLoad");   
        }
        catch (IOException ex)
        {
            // FILE IS INVALID
            showFailure("ERROR:  CANNOT OPEN VAULT FILE", "panelLoad");
            debugMsg("panelLoad:  VAULT FILE ERROR:  "); // + vaultFilename);
        }
        
        

    }//GEN-LAST:event_jButtonLoadSubmitActionPerformed

    private void jButtonHomeUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHomeUpdateActionPerformed
        // TODO add your handling code here:
        try
        {
            if (!showConfirmUpdateEntry)
            {
                resetDeleteButton();
                resetSaveButton();
                resetCloseButton();
                
                if (jListHomeEntryList.getSelectedIndex() != -1)
                {
                    showConfirmUpdateEntry = true;
                    jButtonHomeUpdate.setText(updateButtonConfirmText);
                }
            }
            else
            {
                debugMsg("UPDATING SELECTED ITEM:  " + jListHomeEntryList.getSelectedIndex());
                VaultEntry entry = (VaultEntry) vaultListModelRef.getElementAt(jListHomeEntryList.getSelectedIndex());

                if (jTextFieldHomeEntryLabel.getText().length() < 1)
                {
                    entry.setLabel("[NO LABEL ENTERED]");
                    jTextFieldHomeEntryLabel.setText(entry.getLabel());
                }
                else
                {
                    entry.setLabel(jTextFieldHomeEntryLabel.getText());
                }


                if (jTextFieldHomeEntryUsername.getText().length() < 1)
                {
                    entry.setUsername("[NO USERNAME ENTERED]");
                    jTextFieldHomeEntryUsername.setText(entry.getUsername());
                }
                else
                {
                    entry.setUsername(jTextFieldHomeEntryUsername.getText());
                }


                if (jTextFieldHomeEntryPW.getText().length() < 1)
                {
                    entry.setPasswordAsStr("[NO PASSWORD ENTERED]");
                    jTextFieldHomeEntryPW.setText(entry.getPasswordAsStr());
                }
                else
                {
                    entry.setPasswordAsStr(jTextFieldHomeEntryPW.getText());
                }

                resetPanelHomeButtons();
            }
            
            
        }
        catch (ArrayIndexOutOfBoundsException ex)
        {
            debugMsg("INDEX ERROR:  " + jListHomeEntryList.getSelectedIndex());
        }

    }//GEN-LAST:event_jButtonHomeUpdateActionPerformed

    private void jButtonHomeSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHomeSaveActionPerformed
        // TODO add your handling code here:
            if (!showConfirmSaveVault)
            {
                resetUpdateButton();
                resetDeleteButton();
                resetCloseButton();
                
                showConfirmSaveVault = true;
                jButtonHomeSave.setText(saveButtonConfirmText);
            }
            else
            {
                resetPanelHomeButtons();
                saveVault();
            }
    }//GEN-LAST:event_jButtonHomeSaveActionPerformed

    private void jButtonHomeDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHomeDeleteActionPerformed
        // TODO add your handling code here:

        try
        {
            if (!showConfirmDeleteEntry)
            {
                resetUpdateButton();
                resetSaveButton();
                resetCloseButton();
                
                if (jListHomeEntryList.getSelectedIndex() != -1)
                {
                    showConfirmDeleteEntry = true;
                    jButtonHomeDelete.setText(deleteButtonConfirmText);
                }
            }
            else
            {
                debugMsg("DELETING SELECTED ITEM:  " + jListHomeEntryList.getSelectedIndex());
                VaultEntry entry = (VaultEntry) vaultListModelRef.getElementAt(jListHomeEntryList.getSelectedIndex());
                entry.delete();
                
                jTextFieldHomeEntryLabel.setText("");
                jTextFieldHomeEntryUsername.setText("");
                jTextFieldHomeEntryPW.setText("");

                
                resetPanelHomeButtons();
            }
        }
        catch (ArrayIndexOutOfBoundsException ex)
        {
            debugMsg("INDEX ERROR:  " + jListHomeEntryList.getSelectedIndex());
        }

    }//GEN-LAST:event_jButtonHomeDeleteActionPerformed

    private void jButtonLoadNameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonLoadNameActionPerformed
    {//GEN-HEADEREND:event_jButtonLoadNameActionPerformed
        // TODO add your handling code here:

        jFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jFileChooser.setAcceptAllFileFilterUsed(true);

        int returnVal = jFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            File file = jFileChooser.getSelectedFile();
            String fileName = file.getName();
            String fileDir = file.getParent();
            jTextFieldLoadTextName.setText(fileName);
            jTextFieldLoadTextPath.setText(fileDir);
        }
        else
        {
            debugMsg("panelAuth:  VAULT FILE SELECTION CANCELLED");
        }
    }//GEN-LAST:event_jButtonLoadNameActionPerformed

    private void jTextFieldNewNameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jTextFieldNewNameActionPerformed
    {//GEN-HEADEREND:event_jTextFieldNewNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNewNameActionPerformed

    private void jButtonNewCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonNewCancelActionPerformed
    {//GEN-HEADEREND:event_jButtonNewCancelActionPerformed
        // TODO add your handling code here:
        resetNewCard();
        changeCard("panelBase");
    }//GEN-LAST:event_jButtonNewCancelActionPerformed

    private void jButtonNewSubmitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonNewSubmitActionPerformed
    {//GEN-HEADEREND:event_jButtonNewSubmitActionPerformed

        // IF IF FILE DOES NOT EXIST AND DIR IS VALID AND FILENAME.LENGTH > 0
        // THEN CHANGE TO AUTH CARD

        boolean doesFileAlreadyExist = false;

        try
        {
            // THROW EXCEPTION IF FILE INVALID
            vaultFilename = (jTextFieldNewPath.getText() + File.separator + jTextFieldNewName.getText());
            
            File file = new File(vaultFilename);
            FileInputStream vaultFile = new FileInputStream(file);

            // RUN ONLY IF FILE EXISTS AND CAN BE OPENED
            doesFileAlreadyExist = true;
        }
        catch (IOException ex)
        {
            // FILE DOES NOT ALREADY EXIST
            // NOTE: THIS IS WHAT WE WANT
            doesFileAlreadyExist = false;
        }
        

        if (!doesFileAlreadyExist)
        {
            if (jTextFieldNewName.getText().length() > 0)
            {
                File dir = new File(jTextFieldNewPath.getText());

                if (dir.isDirectory())
                {
                    changeCard("panelAuth", "panelNew");   
                }
                else
                {
                    showFailure("ERROR:  INVALID DIRECTORY", activeCard);
                }
            }
            else
            {
                showFailure("ERROR:  INVALID FILENAME", activeCard);
            }
        }
        else
        {
            showFailure("ERROR:  FILE ALREADY EXISTS", activeCard);
        }
    }//GEN-LAST:event_jButtonNewSubmitActionPerformed

    private void jButtonNewDirActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonNewDirActionPerformed
    {//GEN-HEADEREND:event_jButtonNewDirActionPerformed
        // TODO add your handling code here:
        jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jFileChooser.setAcceptAllFileFilterUsed(false);

        int returnVal = jFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            File file = jFileChooser.getSelectedFile();
            jTextFieldNewPath.setText(file.getAbsolutePath());
        }
        else
        {
            debugMsg("panelAuth:  VAULT FILE SELECTION CANCELLED");
        }

    }//GEN-LAST:event_jButtonNewDirActionPerformed

    private void jTextFieldSaveAsNameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jTextFieldSaveAsNameActionPerformed
    {//GEN-HEADEREND:event_jTextFieldSaveAsNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSaveAsNameActionPerformed

    private void jButtonSaveAsCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSaveAsCancelActionPerformed
    {//GEN-HEADEREND:event_jButtonSaveAsCancelActionPerformed
        // TODO add your handling code here:
        jMenuItemSave.setEnabled(true);
        jMenuItemSaveAs.setEnabled(true);
        jMenuItemFileClose.setEnabled(true);
        jMenuItemFileChPw.setEnabled(true);
        
        changeCard("panelHome", "panelHome");
    }//GEN-LAST:event_jButtonSaveAsCancelActionPerformed

    private void jButtonSaveAsSubmitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSaveAsSubmitActionPerformed
    {//GEN-HEADEREND:event_jButtonSaveAsSubmitActionPerformed
        // TODO add your handling code here:
        saveAsVault();
        
        jMenuItemSave.setEnabled(true);
        jMenuItemSaveAs.setEnabled(true);
        jMenuItemFileClose.setEnabled(true);
        jMenuItemFileChPw.setEnabled(true);
        
    }//GEN-LAST:event_jButtonSaveAsSubmitActionPerformed

    private void jButtonSaveAsDirActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSaveAsDirActionPerformed
    {//GEN-HEADEREND:event_jButtonSaveAsDirActionPerformed
        // TODO add your handling code here:
        jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jFileChooser.setAcceptAllFileFilterUsed(false);

        int returnVal = jFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            File file = jFileChooser.getSelectedFile();
            jTextFieldSaveAsPath.setText(file.getAbsolutePath());
        }
        else
        {
            debugMsg("panelAuth:  VAULT FILE SELECTION CANCELLED");
        }

    }//GEN-LAST:event_jButtonSaveAsDirActionPerformed

    private void jButtonSaveAsNameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSaveAsNameActionPerformed
    {//GEN-HEADEREND:event_jButtonSaveAsNameActionPerformed
        // TODO add your handling code here:
        jFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jFileChooser.setAcceptAllFileFilterUsed(true);

        int returnVal = jFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            File file = jFileChooser.getSelectedFile();
            String fileName = file.getName();
            String fileDir = file.getParent();
            jTextFieldSaveAsName.setText(fileName);
            jTextFieldSaveAsPath.setText(fileDir);
        }
        else
        {
            debugMsg("panelAuth:  VAULT FILE SELECTION CANCELLED");
        }

    }//GEN-LAST:event_jButtonSaveAsNameActionPerformed

    private void jTextFieldNewPathActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jTextFieldNewPathActionPerformed
    {//GEN-HEADEREND:event_jTextFieldNewPathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNewPathActionPerformed

    private void jMenuItemSaveAsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemSaveAsActionPerformed
    {//GEN-HEADEREND:event_jMenuItemSaveAsActionPerformed
        // TODO add your handling code here:
        resetHomeCard();
        resetSaveAsCard();

        jMenuItemSave.setEnabled(false);
        jMenuItemSaveAs.setEnabled(false);
        jMenuItemFileClose.setEnabled(false);
        jMenuItemFileChPw.setEnabled(false);

        changeCard("panelSaveAs", "panelHome");

    }//GEN-LAST:event_jMenuItemSaveAsActionPerformed

    private void jMenuItemSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemSaveActionPerformed
    {//GEN-HEADEREND:event_jMenuItemSaveActionPerformed
        // TODO add your handling code here:
        resetPanelHomeButtons();
        saveVault();
    }//GEN-LAST:event_jMenuItemSaveActionPerformed

    private void jButtonInfoBackActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonInfoBackActionPerformed
    {//GEN-HEADEREND:event_jButtonInfoBackActionPerformed
        // TODO add your handling code here:
        changeCard(goBackToCard);
        jMenuItemHelpAbout.setEnabled(true);
    }//GEN-LAST:event_jButtonInfoBackActionPerformed

    private void jMenuItemHelpAboutActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemHelpAboutActionPerformed
    {//GEN-HEADEREND:event_jMenuItemHelpAboutActionPerformed
        // TODO add your handling code here:
        showInfo(aboutText);
    }//GEN-LAST:event_jMenuItemHelpAboutActionPerformed

    private void jMenuItemHelpHelpActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemHelpHelpActionPerformed
    {//GEN-HEADEREND:event_jMenuItemHelpHelpActionPerformed
        // TODO add your handling code here:
        helpHandler();
    }//GEN-LAST:event_jMenuItemHelpHelpActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAuthCancel;
    private javax.swing.JButton jButtonAuthChooseKeyfile;
    private javax.swing.JButton jButtonAuthSubmit;
    private javax.swing.JButton jButtonBaseExit;
    private javax.swing.JButton jButtonBaseNew;
    private javax.swing.JButton jButtonBaseOpen;
    private javax.swing.JButton jButtonFail;
    private javax.swing.JButton jButtonHomeAdd;
    private javax.swing.JButton jButtonHomeClose;
    private javax.swing.JButton jButtonHomeDelete;
    private javax.swing.JButton jButtonHomeSave;
    private javax.swing.JButton jButtonHomeUpdate;
    private javax.swing.JButton jButtonInfoBack;
    private javax.swing.JButton jButtonLoadCancel;
    private javax.swing.JButton jButtonLoadName;
    private javax.swing.JButton jButtonLoadSubmit;
    private javax.swing.JButton jButtonNewCancel;
    private javax.swing.JButton jButtonNewDir;
    private javax.swing.JButton jButtonNewSubmit;
    private javax.swing.JButton jButtonSaveAsCancel;
    private javax.swing.JButton jButtonSaveAsDir;
    private javax.swing.JButton jButtonSaveAsName;
    private javax.swing.JButton jButtonSaveAsSubmit;
    private javax.swing.JCheckBox jCheckBoxAuthUseKeyfile;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel jLabelAuthKeyfilePath;
    private javax.swing.JLabel jLabelAuthPW;
    private javax.swing.JLabel jLabelBase;
    private javax.swing.JLabel jLabelBase1;
    private javax.swing.JLabel jLabelBase2;
    private javax.swing.JLabel jLabelBase3;
    private javax.swing.JLabel jLabelBase4;
    private javax.swing.JLabel jLabelBase5;
    private javax.swing.JLabel jLabelFailReason;
    private javax.swing.JLabel jLabelHomeEntryLabel;
    private javax.swing.JLabel jLabelHomeEntryList;
    private javax.swing.JLabel jLabelHomeEntryPW;
    private javax.swing.JLabel jLabelHomeEntryUsername;
    private javax.swing.JLabel jLabelLoadTextName;
    private javax.swing.JLabel jLabelLoadTextPath;
    private javax.swing.JLabel jLabelNewName;
    private javax.swing.JLabel jLabelNewPath;
    private javax.swing.JLabel jLabelSaveAsTextName;
    private javax.swing.JLabel jLabelSaveAsTextPath;
    private javax.swing.JList<String> jListHomeEntryList;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuItemFileChPw;
    private javax.swing.JMenuItem jMenuItemFileClose;
    private javax.swing.JMenuItem jMenuItemFileExit;
    private javax.swing.JMenuItem jMenuItemFileOpen;
    private javax.swing.JMenuItem jMenuItemHelpAbout;
    private javax.swing.JMenuItem jMenuItemHelpHelp;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JMenuItem jMenuItemSaveAs;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelAuthButtons;
    private javax.swing.JPanel jPanelAuthText;
    private javax.swing.JPanel jPanelBase;
    private javax.swing.JPanel jPanelBaseButtons;
    private javax.swing.JPanel jPanelHomeButtons;
    private javax.swing.JPanel jPanelHomeTextFields;
    private javax.swing.JPanel jPanelInfoButtons;
    private javax.swing.JPanel jPanelLoadButtons;
    private javax.swing.JPanel jPanelLoadText;
    private javax.swing.JPanel jPanelNewButtons;
    private javax.swing.JPanel jPanelNewText;
    private javax.swing.JPanel jPanelSaveAsButtons;
    private javax.swing.JPanel jPanelSaveAsText;
    private javax.swing.JPasswordField jPasswordFieldAuthPW;
    private javax.swing.JScrollPane jScrollPaneHomeEntryList;
    private javax.swing.JScrollPane jScrollPaneInfo;
    private javax.swing.JPopupMenu.Separator jSeparatorMenuFile1;
    private javax.swing.JPopupMenu.Separator jSeparatorMenuFile2;
    private javax.swing.JPopupMenu.Separator jSeparatorMenuHelp1;
    private javax.swing.JTextField jTextFieldAuthKeyfilePath;
    private javax.swing.JTextField jTextFieldHomeEntryLabel;
    private javax.swing.JTextField jTextFieldHomeEntryPW;
    private javax.swing.JTextField jTextFieldHomeEntryUsername;
    private javax.swing.JTextField jTextFieldLoadTextName;
    private javax.swing.JTextField jTextFieldLoadTextPath;
    private javax.swing.JTextField jTextFieldNewName;
    private javax.swing.JTextField jTextFieldNewPath;
    private javax.swing.JTextField jTextFieldSaveAsName;
    private javax.swing.JTextField jTextFieldSaveAsPath;
    private javax.swing.JTextPane jTextPaneInfo;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel panelAuth;
    private javax.swing.JPanel panelFail;
    private javax.swing.JPanel panelHome;
    private javax.swing.JPanel panelInfo;
    private javax.swing.JPanel panelLoad;
    private javax.swing.JPanel panelNew;
    private javax.swing.JPanel panelSaveAs;
    // End of variables declaration//GEN-END:variables

    // CHANGES CARD IN mainPanel TO cardName   
    private void changeCard(String cardName)
    {
        debugMsg("CHANGING TO CARD:  " + cardName);
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, cardName);
        activeCard = cardName;
    }

    // CHANGES CARD IN mainPanel TO cardName 
    // SETS goBackToCard to setGoBackToCardName
    private void changeCard(String cardName, String setGoBackToCardName)
    {
        debugMsg("CHANGING TO CARD:  " + cardName);
        goBackToCard = setGoBackToCardName;
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, cardName);
        activeCard = cardName;
    }
    

    // DISPLAYS CUSTOM ERROR MESSAGE WITH BACK BUTTON
    private void showFailure(String reason, String goBackTo)
    {
        jLabelFailReason.setText(reason);
//        goBackToCard = goBackTo;
        changeCard("panelFail", goBackTo);
    }

    
    
    private void tryOpenVault()
    {
        if (!isVaultOpen)
        {
            debugMsg("OPENING VAULT");
            try
            {
                debugMsg("TRYING TO OPEN VAULT AT:  "); // + vaultFilename);

                if (jCheckBoxAuthUseKeyfile.isSelected())
                {
                    // TRY OPEN VAULT
                    vaultRef = new Vault(vaultFilename, getHash(jPasswordFieldAuthPW.getPassword(), jTextFieldAuthKeyfilePath.getText()));
                }
                else
                {
                    // TRY OPEN VAULT
                    vaultRef = new Vault(vaultFilename, getHash(jPasswordFieldAuthPW.getPassword()));
                }

                // RUN IF VAULT OPENED SUCCESSFULLY
                vaultListModelRef = new VaultListModel(vaultRef);
                jListHomeEntryList.setModel(vaultListModelRef);

                isVaultOpen = true;
                jMenuItemFileOpen.setEnabled(false);
                jMenuItemSave.setEnabled(true);
                jMenuItemSaveAs.setEnabled(true);
                jMenuItemFileClose.setEnabled(true);
                jMenuItemFileChPw.setEnabled(true);
                
                changeCard("panelHome");
            }
            catch (UnrecoverableKeyException ex)
            {
                // EXCEPTION THROWN IF VAULT NOT AUTHENTICATED PROPERLY
                resetAll();
                showFailure("AUTHENTICATION ERROR", "panelBase");
                debugMsg("panelAuth:  AUTHENTICATION ERROR");
            }
            catch (IOException ex)
            {
                // CATCHES EXCEPTION IF FILE IS NOT VALID VAULT FILE
                resetAll();
                showFailure("ERROR:  NOT A VALID VAULT FILE", "panelBase");
                debugMsg("ERROR:  NOT A VALID VAULT FILE:  "); // + jTextFieldAuthKeyfilePath.getText());
            }

            // RESET AUTH FIELDS
            resetAuthCard();

        }
    }

    private void resetAuthCard()
    {
        debugMsg("DOING RESET AUTH CARD");
        jTextFieldAuthKeyfilePath.setText(null);
        jPasswordFieldAuthPW.setText(null);
        jCheckBoxAuthUseKeyfile.setSelected(true);
    }

    private void resetLoadCard()
    {
        debugMsg("DOING RESET LOAD CARD");
        jTextFieldLoadTextName.setText(null);
        jTextFieldLoadTextPath.setText(null);
    }

    private void resetNewCard()
    {
        debugMsg("DOING RESET NEW CARD");
        jTextFieldNewName.setText(null);
        jTextFieldNewPath.setText(null);
    }

    
    private void resetSaveAsCard()
    {
        debugMsg("DOING RESET SAVE AS CARD");
        jTextFieldSaveAsName.setText(null);
        jTextFieldSaveAsPath.setText(null);
    }

    
    private void resetHomeCard()
    {
        debugMsg("DOING RESET HOME CARD");
        jTextFieldHomeEntryLabel.setText(null);
        jTextFieldHomeEntryUsername.setText(null);
        jTextFieldHomeEntryPW.setText(null);
        jListHomeEntryList.setSelectedIndex(-1);
        resetPanelHomeButtons();
    }
    
    
    private void resetUpdateButton()
    {
        showConfirmUpdateEntry = false;
        jButtonHomeUpdate.setText(updateButtonText);
    }
    
    
    private void resetDeleteButton()
    {
        showConfirmDeleteEntry = false;
        jButtonHomeDelete.setText(deleteButtonText);
    }
    

    private void resetSaveButton()
    {
        showConfirmSaveVault = false;
        jButtonHomeSave.setText(saveButtonText);
    }

    
    private void resetCloseButton()
    {
        showConfirmCloseVault = false;
        jButtonHomeClose.setText(closeButtonText);
    }


    private void resetPanelHomeButtons()
    {
        debugMsg("DOING RESET HOME BUTTONS");
        resetUpdateButton();
        resetDeleteButton();
        resetSaveButton();
        resetCloseButton();
    }

    
    private void resetAll()
    {
        debugMsg("DOING RESET ALL!");
        resetNewCard();
        resetLoadCard();
        resetAuthCard();
        resetSaveAsCard();
        resetHomeCard();

        isVaultOpen = false;

        activeCard = "panelBase";
        goBackToCard = "panelBase";
        
        vaultFilename = null;
        vaultRef = null;
        vaultListModelRef = null;

        jMenuItemFileOpen.setEnabled(true);
        jMenuItemSave.setEnabled(false);
        jMenuItemSaveAs.setEnabled(false);
        jMenuItemFileClose.setEnabled(false);
        jMenuItemFileChPw.setEnabled(false);
        
        jTextPaneInfo.setText(null);
        
        changeCard("panelBase");
    }
    
    
    private void changePassword()
    {
        resetAuthCard();
        changeCard("panelAuth", "panelHome");
    }

    
    private void saveVault()
    {
        if (isVaultOpen)
        {
            debugMsg("SAVING VAULT");
            try
            {
                vaultRef.save();
            }
            catch (IOException ex)
            {
                showFailure("ERROR:  CANNOT SAVE VAULT", "panelHome");
            }
        }
    }


    private void saveAsVault()
    {
        debugMsg("ATTEMPTING SAVE AS");
        if (isVaultOpen)
        {
            
            if (jTextFieldSaveAsName.getText().length() > 0)
            {
                debugMsg("FILENAME NOT EMPTY");
                File dir = new File(jTextFieldSaveAsPath.getText());

                if (dir.isDirectory())
                {

                    debugMsg("DIRECTORY EXISTS");
                    // ATTEMPT TO SAVE AS DIFFERENT 
                    String oldFilepath = vaultRef.getFilepath();

                    debugMsg("SAVING AS DIFFERENT VAULT");
                    try
                    {
                        vaultRef.setFilepath(jTextFieldSaveAsPath.getText() + File.separator + jTextFieldSaveAsName.getText());
                        vaultRef.save();
                        vaultFilename = vaultRef.getFilepath();

                        changeCard("panelHome", "panelHome");
                    }
                    catch (IOException ex)
                    {
                        vaultRef.setFilepath(oldFilepath);
                        showFailure("ERROR:  CANNOT SAVE AS DIFFERENT VAULT", "panelHome");
                    }

                }
                else
                {
                    debugMsg("ERROR: INVALID DIRECTORY");
                    showFailure("ERROR:  INVALID DIRECTORY", "panelHome");
                }
            }
            else
            {
                debugMsg("ERROR: INVALID FILENAME");
                showFailure("ERROR:  INVALID FILENAME", "panelHome");
            }
        }

        resetSaveAsCard();
    }

    
    private void closeVault()
    {
        if (isVaultOpen)
        {
            debugMsg("CLOSING VAULT");
            resetAll();
        }
    }

    
    private void showInfo(String infoText)
    {
        StyledDocument doc = jTextPaneInfo.getStyledDocument();
        SimpleAttributeSet center = new SimpleAttributeSet();
        StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
        doc.setParagraphAttributes(0, doc.getLength(), center, false);
        
        jTextPaneInfo.setText(infoText);
        jTextPaneInfo.setCaretPosition(0);
        
        changeCard("panelInfo", activeCard);
    }
    
    
    private void helpHandler()
    {
        jMenuItemHelpAbout.setEnabled(false);

        if (activeCard == "panelBase")
        {
            showInfo(panelBaseHelp);
        }
        else if (activeCard == "panelNew")
        {
            showInfo(panelNewHelp);
        }
        else if (activeCard == "panelLoad")
        {
            showInfo(panelLoadHelp);
        }
        else if (activeCard == "panelAuth")
        {
            showInfo(panelAuthHelp);
        }
        else if (activeCard == "panelHome")
        {
            showInfo(panelHomeHelp);
        } 
        else if (activeCard == "panelSaveAs")
        {
            showInfo(panelSaveAsHelp);
        } 
        else
        {
            jMenuItemHelpAbout.setEnabled(true);
        }
        
    }
    
    private void exitProgram()
    {
        closeVault();
        resetAll();
        debugMsg("PROGRAM EXECUTION TERMINATED");
        System.exit(0);
    }


    // TEXT DEFINITIONS
    String aboutText = new String("\n\nLoginSecrets:   Secure Password Vault\n\n\nLoginSecrets is a portable, cross-platform solution for securely storing lists of account login credentials.  Users can create new or open existing encrypted password vaults, then view, add, update, and delete entries before saving and closing the password vaults.  Vault files can then be safely transferred over non-secure mediums.  By default, password vaults rely on both a password and a keyfile for (optional) two-factor authentication to access the encrypted data stored within.  \n\nYou can trust LoginSecrets to keep your login details secret*.\n\n\n*NOTE:  Due to platform limitations, for maximum protection it is highly recommended to reboot the computer after using LoginSecrets!\n\n\nLoginSecrets was developed by Brian Sumner, Kevin Yang, and John Crosby of UCDenver.  Copyright 2017.");

    String panelBaseHelp = new String("\n\nCONTEXT-SPECIFIC HELP:\n\n\n\"Exit Program\":\n\nClick on this button to exit the program.\n\n\n\"Create New Vault\": \n\nClick on this button if you do not have an existing password vault to open.\n\n\n\"Open Existing Vault\": \n\nClick on this button if you would like to open a password vault that has previously been created with LoginSecrets.\n\n\nFile Menu - \"Open Vault\":\n\nClicking this menu item will return to the base panel.\n\n\nFile Menu - \"Exit Immediately\":\n\nClicking this menu item will immediately exit the LoginSecrets program.");

    String panelNewHelp = new String("\n\nCONTEXT-SPECIFIC HELP:\n\n\n\"Cancel\":\n\nClick on this button to cancel creating a new password vault.\n\n\n\"Choose Directory for New Vault\": \n\nClick on this button to select a directory for saving a new password vault.\n\n\n\"Submit\": \n\nClick on this button after selecting a directory and typing out a filename to try to create a new password vault.  If the directory and filename is valid and does not refer to any existing file, a new password vault will be created (but not yet saved).\n\n\nFile Menu - \"Open Vault\":\n\nClicking this menu item will return to the base panel.\n\n\nFile Menu - \"Exit Immediately\":\n\nClicking this menu item will immediately exit the LoginSecrets program.");

    String panelLoadHelp = new String("\n\nCONTEXT-SPECIFIC HELP:\n\n\n\"Cancel\":\n\nClick on this button to cancel opening an existing password vault.\n\n\n\"Choose Filename of Existing Vault\": \n\nClick on this button to select an existing password vault from the filesystem.\n\n\n\"Submit\": \n\nClick on this button to try to open an existing password vault that you have selected.\n\n\nFile Menu - \"Open Vault\":\n\nClicking this menu item will return to the base panel.\n\n\nFile Menu - \"Exit Immediately\":\n\nClicking this menu item will immediately exit the LoginSecrets program.");
    
    String panelAuthHelp = new String("\n\nCONTEXT-SPECIFIC HELP:\n\n\n\"Enter Password\":\n\nType a password to use for authentication.\n\n\n\"Keyfile Path\":\n\nThis field holds the path to a keyfile used for two-factor authentication (if applicable).  You can use the \"Choose Keyfile\" button to select a keyfile from the filesystem.\n\n\n\"Use Keyfile for Two-Factor Authentication\":\n\nIf this box is checked, authentication will be performed with both a password and a keyfile.  If it is unchecked, only a password will be used.  Please note that if you are loading an existing password vault that uses a keyfile for authentication, you will be required to select the same (unchanged) keyfile to open the vault.\n\n\n\"Cancel\":\n\nClick on this button to cancel the authentication process.\n\n\n\"Choose Keyfile\":\n\nClick on this button to select a keyfile from the filesystem.\n\n\n\"Submit\": \n\nClick on this button to attempt authentication.  If you are changing the password of an existing password vault, the new authentication values will take effect only after saving the vault.\n\n\nFile Menu - \"Open Vault\":\n\nClicking this menu item will return to the base panel.\n\n\nFile Menu - \"Exit Immediately\":\n\nClicking this menu item will immediately exit the LoginSecrets program.");
    
    String panelHomeHelp = new String("\n\nCONTEXT-SPECIFIC HELP:\n\n\n\"Vault Entries\" List:\n\nIf there are entries in the password vault, click the entry from the list to populate its stored values into the Vault Entry Label, Vault Entry Account Username, and Vault Entry Account Password text fields.\n\n\n\"Add Entry\":\n\nClick this button to add a new entry to the vault.  The current values in the three text fields at the top will be stored into the entry.  If any of the text fields are empty, default values will be used instead.\n\n\n\"Update Entry\":\n\nAfter selecting an entry from the list to update, click this button to bring up a confirmation.  Click the button again to confirm that you want to replace the values in the entry with the current values shown in the three text fields at the top.\n\n\n\"Delete Entry\":\n\nAfter selecting an entry from the list to delete, click this button to bring up a confirmation.  Click the button again to confirm that you want to delete the entry from the password vault.\n\n\n\"Save Vault\":\n\nTo save the password vault, click this button to bring up a confirmation.  Click the button again to confirm that you want to save the password vault.\n\n\n\"Close Vault\": \n\nTo close the password vault, click this button to bring up a confirmation.  Click the button again to confirm that you want to close the password vault.  Please note that if you have not first saved the vault, all changes will be discarded!\n\n\nFile Menu - \"Save Vault\":\n\nClick this menu item to save the password vault.\n\n\nFile Menu - \"Save Vault As...\":\n\nClick this menu item to save the password vault as a different file.  Please note that after you save the vault as a different file, all future changes will be saved to the new file and not the original.\n\n\nFile Menu - \"Close Vault\":\n\nClick this menu item to close the password vault.  Please note that if you have not first saved the vault, all changes will be discarded!\n\n\nFile Menu - \"Change Password\":\n\nClick this menu item to change the password and keyfile used to save the vault.  Please note that the changes will not go into effect until you have saved the password vault.\n\n\nFile Menu - \"Exit Immediately\":\n\nClicking this menu item will immediately exit the LoginSecrets program without saving the vault!");
    
    String panelSaveAsHelp = new String("\n\nCONTEXT-SPECIFIC HELP:\n\n\n\"Cancel\":\n\nClick on this button to cancel saving the password vault as a different file.\n\n\n\"Choose Directory\": \n\nClick on this button to select a directory from the filesystem to use for the new password vault.  Be sure to type a new filename into the Save As Vault Filename text field.\n\n\n\"Choose Filename\": \n\nClick on this button to select an existing file from the filesystem to overwrite as the new password vault.\n\n\n\"Submit\": \n\nClick on this button to try to save the password vault as a different file.  If the save cannot be made, original password vault will continue to be used\n\n\nFile Menu - \"Exit Immediately\":\n\nClicking this menu item will immediately exit the LoginSecrets program without saving the vault!");
        

}
