/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package passwordvault;

import java.awt.CardLayout;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.security.UnrecoverableKeyException;
import javax.swing.JFileChooser;
import static passwordvault.Debug.debugMsg;
import static passwordvault.security.Hashing.getHash;
//import static passwordvault.security.Hashing.getCharHash;
//import static passwordvault.security.Hashing.getFileHash;
import passwordvault.security.vault.Vault;
import passwordvault.security.vault.VaultEntry;
import passwordvault.security.vault.VaultListModel;

/**
 *
 * @author Brian Sumner et al.
 */
public class PasswordVaultUI extends javax.swing.JFrame
{

    /**
     * Creates new form PasswordVaultUI
     */
    public PasswordVaultUI()
    {
        debugMsg("INITIALIZING UI COMPONENTS");
        initComponents();
    }

    // DEFINE CUSTOM CLASS VARS
    private String goBackToCard = "panelBase";
    private String vaultFilename = "";
    private boolean isVaultOpen = false;
    private boolean doCreateNewVault = false;
//    private boolean isKeyFileValid = false;

    // USED FOR panelHome BUTTON CONFIRMATION STATES
    private boolean showConfirmUpdateEntry = false;
    private String updateButtonText = "Update Entry";
    private String updateButtonConfirmText = "Really Update Entry?";

    private boolean showConfirmDeleteEntry = false;
    private String deleteButtonText = "Delete Entry";
    private String deleteButtonConfirmText = "Really Delete Entry?";

    private boolean showConfirmSaveVault = false;
    private String saveButtonText = "Save Vault";
    private String saveButtonConfirmText = "Really Save Vault?";

    private boolean showConfirmCloseVault = false;
    private String closeButtonText = "Close Vault";
    private String closeButtonConfirmText = "Really Close Vault?";

    // REFERENCES TO VAULT AND VAULTLISTMODEL OBJECTS USED BY UI
    Vault vaultRef = null;
    VaultListModel vaultListModelRef = null;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(PasswordVaultUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(PasswordVaultUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(PasswordVaultUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(PasswordVaultUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new PasswordVaultUI().setVisible(true);
//                PasswordVault pwv = new PasswordVault();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jFileChooserLoad = new javax.swing.JFileChooser();
        mainPanel = new javax.swing.JPanel();
        jPanelBase = new javax.swing.JPanel();
        jLabelBase = new javax.swing.JLabel();
        jPanelBaseButtons = new javax.swing.JPanel();
        jButtonBaseExit = new javax.swing.JButton();
        jButtonBaseNew = new javax.swing.JButton();
        jButtonBaseOpen = new javax.swing.JButton();
        panelLoad = new javax.swing.JPanel();
        jPanelLoadText = new javax.swing.JPanel();
        jTextFieldLoadTextName = new javax.swing.JTextField();
        jLabelLoadTextPath = new javax.swing.JLabel();
        jTextFieldLoadTextPath = new javax.swing.JTextField();
        jLabelLoadTextName = new javax.swing.JLabel();
        jPanelLoadButtons = new javax.swing.JPanel();
        jButtonLoadCancel = new javax.swing.JButton();
        jButtonLoadSubmit = new javax.swing.JButton();
        jButtonLoadDir = new javax.swing.JButton();
        jButtonLoadName = new javax.swing.JButton();
        panelAuth = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabelAuthPW = new javax.swing.JLabel();
        jPasswordFieldAuthPW = new javax.swing.JPasswordField();
        jPanelAuthButtons = new javax.swing.JPanel();
        jButtonAuthCancel = new javax.swing.JButton();
        jButtonAuthChooseKeyfile = new javax.swing.JButton();
        jButtonAuthSubmit = new javax.swing.JButton();
        jLabelAuthKeyfilePath = new javax.swing.JLabel();
        jTextFieldAuthKeyfilePath = new javax.swing.JTextField();
        jCheckBoxAuthUseKeyfile = new javax.swing.JCheckBox();
        panelFail = new javax.swing.JPanel();
        jLabelFailReason = new javax.swing.JLabel();
        jButtonFail = new javax.swing.JButton();
        panelHome = new javax.swing.JPanel();
        jPanelHomeButtons = new javax.swing.JPanel();
        jButtonHomeAdd = new javax.swing.JButton();
        jButtonHomeUpdate = new javax.swing.JButton();
        jButtonHomeDelete = new javax.swing.JButton();
        jButtonHomeSave = new javax.swing.JButton();
        jButtonHomeClose = new javax.swing.JButton();
        jPanelHomeTextFields = new javax.swing.JPanel();
        jLabelHomeEntryLabel = new javax.swing.JLabel();
        jTextFieldHomeEntryLabel = new javax.swing.JTextField();
        jLabelHomeEntryUsername = new javax.swing.JLabel();
        jTextFieldHomeEntryUsername = new javax.swing.JTextField();
        jLabelHomeEntryPW = new javax.swing.JLabel();
        jTextFieldHomeEntryPW = new javax.swing.JTextField();
        jScrollPaneHomeEntryList = new javax.swing.JScrollPane();
        jListHomeEntryList = new javax.swing.JList<>();
        jLabelHomeEntryList = new javax.swing.JLabel();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemFileLoad = new javax.swing.JMenuItem();
        jMenuItemFileClose = new javax.swing.JMenuItem();
        jSeparatorMenuFile1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemFileChPw = new javax.swing.JMenuItem();
        jSeparatorMenuFile2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemFileExit = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItemHelpHelp = new javax.swing.JMenuItem();
        jSeparatorMenuHelp1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemHelpAbout = new javax.swing.JMenuItem();
        jMenuDebug = new javax.swing.JMenu();
        jMenuDebugSelPanel = new javax.swing.JMenu();
        jMenuItemDebugSelPanelStore = new javax.swing.JMenuItem();
        jMenuItemDebugSelPanelLoad = new javax.swing.JMenuItem();
        jMenuItemDebugSelPanelAuth = new javax.swing.JMenuItem();
        jMenuItemDebugSelPanelFail = new javax.swing.JMenuItem();
        jMenuItemDebugSelPanelHome = new javax.swing.JMenuItem();
        jMenuDebugSetVar = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemDebugSetVarOpenTrue = new javax.swing.JMenuItem();
        jMenuItemDebugSetVarOpenFalse = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                exitProgramEvent(evt);
            }
        });

        mainPanel.setLayout(new java.awt.CardLayout());

        jLabelBase.setText("Welcome to <insert program name>");

        jButtonBaseExit.setText("Exit");
        jButtonBaseExit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonBaseExitActionPerformed(evt);
            }
        });

        jButtonBaseNew.setText("Create New Vault");
        jButtonBaseNew.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonBaseNewActionPerformed(evt);
            }
        });

        jButtonBaseOpen.setText("Select Existing Vault");
        jButtonBaseOpen.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonBaseOpenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelBaseButtonsLayout = new javax.swing.GroupLayout(jPanelBaseButtons);
        jPanelBaseButtons.setLayout(jPanelBaseButtonsLayout);
        jPanelBaseButtonsLayout.setHorizontalGroup(
            jPanelBaseButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBaseButtonsLayout.createSequentialGroup()
                .addComponent(jButtonBaseExit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonBaseNew)
                .addGap(29, 29, 29)
                .addComponent(jButtonBaseOpen)
                .addContainerGap())
        );
        jPanelBaseButtonsLayout.setVerticalGroup(
            jPanelBaseButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBaseButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBaseButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonBaseExit)
                    .addComponent(jButtonBaseNew)
                    .addComponent(jButtonBaseOpen))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelBaseLayout = new javax.swing.GroupLayout(jPanelBase);
        jPanelBase.setLayout(jPanelBaseLayout);
        jPanelBaseLayout.setHorizontalGroup(
            jPanelBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBaseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelBaseButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanelBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelBaseLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabelBase)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanelBaseLayout.setVerticalGroup(
            jPanelBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBaseLayout.createSequentialGroup()
                .addGap(0, 356, Short.MAX_VALUE)
                .addComponent(jPanelBaseButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanelBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelBaseLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabelBase)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        mainPanel.add(jPanelBase, "panelBase");

        jTextFieldLoadTextName.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jTextFieldLoadTextNameActionPerformed(evt);
            }
        });

        jLabelLoadTextPath.setText("Vault Directory Path:");

        javax.swing.GroupLayout jPanelLoadTextLayout = new javax.swing.GroupLayout(jPanelLoadText);
        jPanelLoadText.setLayout(jPanelLoadTextLayout);
        jPanelLoadTextLayout.setHorizontalGroup(
            jPanelLoadTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextFieldLoadTextName)
            .addGroup(jPanelLoadTextLayout.createSequentialGroup()
                .addComponent(jLabelLoadTextPath)
                .addGap(0, 286, Short.MAX_VALUE))
            .addComponent(jTextFieldLoadTextPath)
        );
        jPanelLoadTextLayout.setVerticalGroup(
            jPanelLoadTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLoadTextLayout.createSequentialGroup()
                .addComponent(jTextFieldLoadTextName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelLoadTextPath)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextFieldLoadTextPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabelLoadTextName.setText("Vault Filename:");

        jButtonLoadCancel.setText("Cancel");
        jButtonLoadCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonLoadCancelActionPerformed(evt);
            }
        });

        jButtonLoadSubmit.setText("Submit");
        jButtonLoadSubmit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonLoadSubmitActionPerformed(evt);
            }
        });

        jButtonLoadDir.setText("Choose Directory");
        jButtonLoadDir.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonLoadDirActionPerformed(evt);
            }
        });

        jButtonLoadName.setText("Choose Filename");
        jButtonLoadName.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonLoadNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelLoadButtonsLayout = new javax.swing.GroupLayout(jPanelLoadButtons);
        jPanelLoadButtons.setLayout(jPanelLoadButtonsLayout);
        jPanelLoadButtonsLayout.setHorizontalGroup(
            jPanelLoadButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLoadButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonLoadCancel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonLoadDir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonLoadName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonLoadSubmit)
                .addContainerGap())
        );
        jPanelLoadButtonsLayout.setVerticalGroup(
            jPanelLoadButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLoadButtonsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelLoadButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonLoadCancel)
                    .addComponent(jButtonLoadSubmit)
                    .addComponent(jButtonLoadDir)
                    .addComponent(jButtonLoadName))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelLoadLayout = new javax.swing.GroupLayout(panelLoad);
        panelLoad.setLayout(panelLoadLayout);
        panelLoadLayout.setHorizontalGroup(
            panelLoadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLoadLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLoadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelLoadText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelLoadLayout.createSequentialGroup()
                        .addComponent(jLabelLoadTextName)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jPanelLoadButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelLoadLayout.setVerticalGroup(
            panelLoadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLoadLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabelLoadTextName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelLoadText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 219, Short.MAX_VALUE)
                .addComponent(jPanelLoadButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        mainPanel.add(panelLoad, "panelLoad");

        jLabel2.setText("auth");

        jLabelAuthPW.setText("Enter Password:");

        jButtonAuthCancel.setText("Cancel");
        jButtonAuthCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonAuthCancelActionPerformed(evt);
            }
        });

        jButtonAuthChooseKeyfile.setText("Choose Keyfile");
        jButtonAuthChooseKeyfile.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonAuthChooseKeyfileActionPerformed(evt);
            }
        });

        jButtonAuthSubmit.setText("Submit");
        jButtonAuthSubmit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonAuthSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelAuthButtonsLayout = new javax.swing.GroupLayout(jPanelAuthButtons);
        jPanelAuthButtons.setLayout(jPanelAuthButtonsLayout);
        jPanelAuthButtonsLayout.setHorizontalGroup(
            jPanelAuthButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelAuthButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonAuthCancel)
                .addGap(77, 77, 77)
                .addComponent(jButtonAuthChooseKeyfile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                .addComponent(jButtonAuthSubmit)
                .addContainerGap())
        );
        jPanelAuthButtonsLayout.setVerticalGroup(
            jPanelAuthButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelAuthButtonsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelAuthButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAuthSubmit)
                    .addComponent(jButtonAuthCancel)
                    .addComponent(jButtonAuthChooseKeyfile))
                .addContainerGap())
        );

        jLabelAuthKeyfilePath.setText("Keyfile Path:");

        jCheckBoxAuthUseKeyfile.setSelected(true);
        jCheckBoxAuthUseKeyfile.setText("Use Keyfile for Two-Factor Authentication");

        javax.swing.GroupLayout panelAuthLayout = new javax.swing.GroupLayout(panelAuth);
        panelAuth.setLayout(panelAuthLayout);
        panelAuthLayout.setHorizontalGroup(
            panelAuthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelAuthButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelAuthLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAuthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPasswordFieldAuthPW)
                    .addComponent(jTextFieldAuthKeyfilePath)
                    .addGroup(panelAuthLayout.createSequentialGroup()
                        .addGroup(panelAuthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxAuthUseKeyfile)
                            .addComponent(jLabel2)
                            .addComponent(jLabelAuthPW)
                            .addComponent(jLabelAuthKeyfilePath))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelAuthLayout.setVerticalGroup(
            panelAuthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAuthLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(56, 56, 56)
                .addComponent(jLabelAuthPW)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPasswordFieldAuthPW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelAuthKeyfilePath)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldAuthKeyfilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxAuthUseKeyfile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 152, Short.MAX_VALUE)
                .addComponent(jPanelAuthButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        mainPanel.add(panelAuth, "panelAuth");

        jLabelFailReason.setText("...");

        jButtonFail.setText("Go Back");
        jButtonFail.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        jButtonFail.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonFail.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonFailActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelFailLayout = new javax.swing.GroupLayout(panelFail);
        panelFail.setLayout(panelFailLayout);
        panelFailLayout.setHorizontalGroup(
            panelFailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFailLayout.createSequentialGroup()
                .addGap(179, 179, 179)
                .addComponent(jButtonFail)
                .addContainerGap(156, Short.MAX_VALUE))
            .addGroup(panelFailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelFailLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabelFailReason)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        panelFailLayout.setVerticalGroup(
            panelFailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFailLayout.createSequentialGroup()
                .addContainerGap(280, Short.MAX_VALUE)
                .addComponent(jButtonFail)
                .addGap(98, 98, 98))
            .addGroup(panelFailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelFailLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabelFailReason)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        mainPanel.add(panelFail, "panelFail");

        jButtonHomeAdd.setText("Add Entry");
        jButtonHomeAdd.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonHomeAddActionPerformed(evt);
            }
        });

        jButtonHomeUpdate.setText("Update Entry");
        jButtonHomeUpdate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonHomeUpdateActionPerformed(evt);
            }
        });

        jButtonHomeDelete.setText("Delete Entry");
        jButtonHomeDelete.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonHomeDeleteActionPerformed(evt);
            }
        });

        jButtonHomeSave.setText("Save Vault");
        jButtonHomeSave.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonHomeSaveActionPerformed(evt);
            }
        });

        jButtonHomeClose.setText("Close Vault");
        jButtonHomeClose.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonHomeCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelHomeButtonsLayout = new javax.swing.GroupLayout(jPanelHomeButtons);
        jPanelHomeButtons.setLayout(jPanelHomeButtonsLayout);
        jPanelHomeButtonsLayout.setHorizontalGroup(
            jPanelHomeButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHomeButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelHomeButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonHomeClose, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonHomeUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonHomeAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonHomeSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonHomeDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelHomeButtonsLayout.setVerticalGroup(
            jPanelHomeButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHomeButtonsLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jButtonHomeAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jButtonHomeUpdate)
                .addGap(18, 18, 18)
                .addComponent(jButtonHomeDelete)
                .addGap(18, 18, 18)
                .addComponent(jButtonHomeSave)
                .addGap(18, 18, 18)
                .addComponent(jButtonHomeClose)
                .addContainerGap())
        );

        jLabelHomeEntryLabel.setText("Vault Entry Label:");

        jLabelHomeEntryUsername.setText("Vault Entry Account Username:");

        jLabelHomeEntryPW.setText("Vault Entry Account Password:");

        javax.swing.GroupLayout jPanelHomeTextFieldsLayout = new javax.swing.GroupLayout(jPanelHomeTextFields);
        jPanelHomeTextFields.setLayout(jPanelHomeTextFieldsLayout);
        jPanelHomeTextFieldsLayout.setHorizontalGroup(
            jPanelHomeTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextFieldHomeEntryPW)
            .addComponent(jTextFieldHomeEntryUsername)
            .addGroup(jPanelHomeTextFieldsLayout.createSequentialGroup()
                .addGroup(jPanelHomeTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelHomeEntryLabel)
                    .addComponent(jLabelHomeEntryUsername)
                    .addComponent(jLabelHomeEntryPW))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jTextFieldHomeEntryLabel)
        );
        jPanelHomeTextFieldsLayout.setVerticalGroup(
            jPanelHomeTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHomeTextFieldsLayout.createSequentialGroup()
                .addComponent(jLabelHomeEntryLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldHomeEntryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelHomeEntryUsername)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldHomeEntryUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelHomeEntryPW)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldHomeEntryPW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jListHomeEntryList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListHomeEntryList.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                jListHomeEntryListValueChanged(evt);
            }
        });
        jScrollPaneHomeEntryList.setViewportView(jListHomeEntryList);

        jLabelHomeEntryList.setText("Vault Entries:");

        javax.swing.GroupLayout panelHomeLayout = new javax.swing.GroupLayout(panelHome);
        panelHome.setLayout(panelHomeLayout);
        panelHomeLayout.setHorizontalGroup(
            panelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHomeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelHomeLayout.createSequentialGroup()
                        .addComponent(jPanelHomeTextFields, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(panelHomeLayout.createSequentialGroup()
                        .addGroup(panelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneHomeEntryList, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                            .addGroup(panelHomeLayout.createSequentialGroup()
                                .addComponent(jLabelHomeEntryList)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelHomeButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        panelHomeLayout.setVerticalGroup(
            panelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelHomeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelHomeTextFields, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelHomeButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelHomeLayout.createSequentialGroup()
                        .addComponent(jLabelHomeEntryList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneHomeEntryList)
                        .addContainerGap())))
        );

        mainPanel.add(panelHome, "panelHome");

        jMenuFile.setText("File");

        jMenuItemFileLoad.setText("Open Vault");
        jMenuItemFileLoad.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemFileLoadActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemFileLoad);

        jMenuItemFileClose.setText("Close Vault");
        jMenuItemFileClose.setEnabled(false);
        jMenuItemFileClose.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemFileCloseActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemFileClose);
        jMenuFile.add(jSeparatorMenuFile1);

        jMenuItemFileChPw.setText("Change Password");
        jMenuItemFileChPw.setEnabled(false);
        jMenuItemFileChPw.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemFileChPwActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemFileChPw);
        jMenuFile.add(jSeparatorMenuFile2);

        jMenuItemFileExit.setText("Exit");
        jMenuItemFileExit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemFileExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemFileExit);

        jMenuBar.add(jMenuFile);

        jMenuHelp.setText("Help");

        jMenuItemHelpHelp.setText("Help");
        jMenuHelp.add(jMenuItemHelpHelp);
        jMenuHelp.add(jSeparatorMenuHelp1);

        jMenuItemHelpAbout.setText("About");
        jMenuHelp.add(jMenuItemHelpAbout);

        jMenuBar.add(jMenuHelp);

        jMenuDebug.setText("DEBUG");

        jMenuDebugSelPanel.setText("SELECT PANEL");

        jMenuItemDebugSelPanelStore.setText("panelBase");
        jMenuItemDebugSelPanelStore.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemDebugSelPanelStoreActionPerformed(evt);
            }
        });
        jMenuDebugSelPanel.add(jMenuItemDebugSelPanelStore);

        jMenuItemDebugSelPanelLoad.setText("panelLoad");
        jMenuItemDebugSelPanelLoad.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemDebugSelPanelLoadActionPerformed(evt);
            }
        });
        jMenuDebugSelPanel.add(jMenuItemDebugSelPanelLoad);

        jMenuItemDebugSelPanelAuth.setText("panelAuth");
        jMenuItemDebugSelPanelAuth.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemDebugSelPanelAuthActionPerformed(evt);
            }
        });
        jMenuDebugSelPanel.add(jMenuItemDebugSelPanelAuth);

        jMenuItemDebugSelPanelFail.setText("panelFail");
        jMenuItemDebugSelPanelFail.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemDebugSelPanelFailActionPerformed(evt);
            }
        });
        jMenuDebugSelPanel.add(jMenuItemDebugSelPanelFail);

        jMenuItemDebugSelPanelHome.setText("panelHome");
        jMenuItemDebugSelPanelHome.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemDebugSelPanelHomeActionPerformed(evt);
            }
        });
        jMenuDebugSelPanel.add(jMenuItemDebugSelPanelHome);

        jMenuDebug.add(jMenuDebugSelPanel);

        jMenuDebugSetVar.setText("SET VAR");

        jMenu1.setText("isVaultOpen");

        jMenuItemDebugSetVarOpenTrue.setText("isVaultOpen = true;");
        jMenuItemDebugSetVarOpenTrue.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemDebugSetVarOpenTrueActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemDebugSetVarOpenTrue);

        jMenuItemDebugSetVarOpenFalse.setText("isVaultOpen = false;");
        jMenuItemDebugSetVarOpenFalse.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItemDebugSetVarOpenFalseActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemDebugSetVarOpenFalse);

        jMenuDebugSetVar.add(jMenu1);

        jMenu2.setText("OpenVault Menu Item");

        jMenuItem1.setText("enabled");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem2.setText("disabled");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuDebugSetVar.add(jMenu2);

        jMenu3.setText("CloseVault Menu Item");

        jMenuItem3.setText("enabled");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem4.setText("disabled");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuDebugSetVar.add(jMenu3);

        jMenuDebug.add(jMenuDebugSetVar);

        jMenuBar.add(jMenuDebug);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemDebugSelPanelLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDebugSelPanelLoadActionPerformed
        // TODO add your handling code here:
        changeCard("panelLoad");
    }//GEN-LAST:event_jMenuItemDebugSelPanelLoadActionPerformed

    private void jMenuItemDebugSelPanelAuthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDebugSelPanelAuthActionPerformed
        // TODO add your handling code here:
        changeCard("panelAuth");
    }//GEN-LAST:event_jMenuItemDebugSelPanelAuthActionPerformed

    private void jMenuItemFileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFileExitActionPerformed
        // TODO add your handling code here:
        debugMsg("EXITING FROM MENU ITEM");
        exitProgram();
    }//GEN-LAST:event_jMenuItemFileExitActionPerformed

    private void exitProgramEvent(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitProgramEvent
        // TODO add your handling code here:
        debugMsg("EXITING FROM WINDOW EVENT");
        exitProgram();
    }//GEN-LAST:event_exitProgramEvent

    private void jButtonBaseExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBaseExitActionPerformed
        // TODO add your handling code here:
        debugMsg("EXITING FROM panelBase EXIT BUTTON");
        exitProgram();
    }//GEN-LAST:event_jButtonBaseExitActionPerformed

    private void jButtonBaseNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBaseNewActionPerformed
        // TODO add your handling code here:
        debugMsg("panelBase:  CREATE NEW VAULT BUTTON PRESSED");
        doCreateNewVault = true;
    }//GEN-LAST:event_jButtonBaseNewActionPerformed

    private void jButtonBaseOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBaseOpenActionPerformed
        // TODO add your handling code here:
        debugMsg("panelBase:  OPEN EXISTING VAULT BUTTON PRESSED");
        doCreateNewVault = false;
        changeCard("panelLoad");
    }//GEN-LAST:event_jButtonBaseOpenActionPerformed

    private void jTextFieldLoadTextNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldLoadTextNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldLoadTextNameActionPerformed

    private void jButtonFailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFailActionPerformed
        // TODO add your handling code here:
        debugMsg("FAILURE ACCEPTED");
        changeCard(goBackToCard);
    }//GEN-LAST:event_jButtonFailActionPerformed

    private void jMenuItemDebugSelPanelFailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDebugSelPanelFailActionPerformed
        // TODO add your handling code here:
        changeCard("panelFail");
    }//GEN-LAST:event_jMenuItemDebugSelPanelFailActionPerformed

    private void jMenuItemFileCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFileCloseActionPerformed
        debugMsg("CLOSING VAULT FROM MENU ITEM");
        closeVault();
        changeCard("panelBase");
    }//GEN-LAST:event_jMenuItemFileCloseActionPerformed

    private void jMenuItemDebugSelPanelHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDebugSelPanelHomeActionPerformed
        // TODO add your handling code here:
        changeCard("panelHome");
    }//GEN-LAST:event_jMenuItemDebugSelPanelHomeActionPerformed

    private void jMenuItemDebugSelPanelStoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDebugSelPanelStoreActionPerformed
        // TODO add your handling code here:
        changeCard("panelBase");
    }//GEN-LAST:event_jMenuItemDebugSelPanelStoreActionPerformed

    private void jButtonAuthSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAuthSubmitActionPerformed
        // TODO add your handling code here:

        tryOpenVault();

    }//GEN-LAST:event_jButtonAuthSubmitActionPerformed

    private void jButtonAuthCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAuthCancelActionPerformed
        debugMsg("panelAuth:  CANCELLING AUTHENTICATION");
        // RESET INPUTS
        resetAuthCard();
        
        // GO BACK
        changeCard(goBackToCard);
    }//GEN-LAST:event_jButtonAuthCancelActionPerformed

    private void jMenuItemFileLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFileLoadActionPerformed
        changeCard("panelBase");
    }//GEN-LAST:event_jMenuItemFileLoadActionPerformed

    private void jButtonAuthChooseKeyfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAuthChooseKeyfileActionPerformed
        int returnVal = jFileChooserLoad.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            File file = jFileChooserLoad.getSelectedFile();
            String keyFilePath = file.getAbsolutePath();
            jTextFieldAuthKeyfilePath.setText(keyFilePath);
        }
        else
        {
            debugMsg("panelAuth:  KEYFILE SELECTION CANCELLED");
        }
    }//GEN-LAST:event_jButtonAuthChooseKeyfileActionPerformed

    private void jButtonHomeAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHomeAddActionPerformed
        // TODO add your handling code here:
//        try {
        debugMsg("ADDING NEW ITEM");

        String newLabel = new String(jTextFieldHomeEntryLabel.getText());
        String newUsername = new String(jTextFieldHomeEntryUsername.getText());
        String newPW = new String(jTextFieldHomeEntryPW.getText());

        if (jTextFieldHomeEntryLabel.getText().length() < 1)
        {
            newLabel = "[NO LABEL ENTERED]";
            jTextFieldHomeEntryLabel.setText(newLabel);
        }

        if (jTextFieldHomeEntryUsername.getText().length() < 1)
        {
            newUsername = "[NO USERNAME ENTERED]";
            jTextFieldHomeEntryUsername.setText(newUsername);
        }

        if (jTextFieldHomeEntryPW.getText().length() < 1)
        {
            newPW = "[NO PASSWORD ENTERED]";
            jTextFieldHomeEntryPW.setText(newPW);
        }
        
        VaultEntry entry = new VaultEntry(
                vaultRef,
                newLabel,
                newUsername,
                newPW
        );

        jListHomeEntryList.setSelectedIndex(vaultListModelRef.getSize() - 1);
        
        resetPanelHomeButtons();
        
//        } catch (ArrayIndexOutOfBoundsException ex) {
//            debugMsg("INDEX ERROR:  " + jListHomeEntryList.getSelectedIndex());
//        }

    }//GEN-LAST:event_jButtonHomeAddActionPerformed

    private void jButtonHomeCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHomeCloseActionPerformed
        // TODO add your handling code here:
            if (!showConfirmCloseVault)
            {
                resetUpdateButton();
                resetDeleteButton();
                resetSaveButton();
                
                showConfirmCloseVault = true;
                jButtonHomeClose.setText(closeButtonConfirmText);
            }
            else
            {
                resetPanelHomeButtons();
                closeVault();
            }
    }//GEN-LAST:event_jButtonHomeCloseActionPerformed

    private void jMenuItemDebugSetVarOpenTrueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDebugSetVarOpenTrueActionPerformed
        // TODO add your handling code here:
        isVaultOpen = true;
    }//GEN-LAST:event_jMenuItemDebugSetVarOpenTrueActionPerformed

    private void jMenuItemDebugSetVarOpenFalseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDebugSetVarOpenFalseActionPerformed
        // TODO add your handling code here:
        isVaultOpen = false;
    }//GEN-LAST:event_jMenuItemDebugSetVarOpenFalseActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        jMenuItemFileLoad.setEnabled(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        jMenuItemFileLoad.setEnabled(false);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        jMenuItemFileClose.setEnabled(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        jMenuItemFileClose.setEnabled(false);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jListHomeEntryListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListHomeEntryListValueChanged
        // TODO add your handling code here:
        try
        {
            debugMsg("SELECTED ITEM:  " + jListHomeEntryList.getSelectedIndex());
            VaultEntry entry = (VaultEntry) vaultListModelRef.getElementAt(jListHomeEntryList.getSelectedIndex());

            jTextFieldHomeEntryLabel.setText(entry.getLabel());
            jTextFieldHomeEntryUsername.setText(entry.getUsername());
            jTextFieldHomeEntryPW.setText(entry.getPasswordAsStr());
            

        }
        catch (ArrayIndexOutOfBoundsException ex)
        {
            debugMsg("INDEX ERROR:  " + jListHomeEntryList.getSelectedIndex());
        }
        
        resetPanelHomeButtons();
    }//GEN-LAST:event_jListHomeEntryListValueChanged

    private void jMenuItemFileChPwActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFileChPwActionPerformed
        // TODO add your handling code here:
        changePassword();
    }//GEN-LAST:event_jMenuItemFileChPwActionPerformed

    private void jButtonLoadCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadCancelActionPerformed
        // TODO add your handling code here:

        resetLoadCard();
        changeCard("panelBase");

    }//GEN-LAST:event_jButtonLoadCancelActionPerformed

    private void jButtonLoadSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadSubmitActionPerformed
        
        // IF doCreateNewVault THEN VERIFY:
            // DIRECTORY EXISTS AND FILENAME NOT NULL
        // IF NOT doCreateNewVault THEN VERIFY:
            // PREEXISTING VAULT FILE CAN BE OPENED
        // IF VERIFICATION SUCCESSFUL, CHANGE TO AUTH CARD
        
        changeCard("panelAuth", "panelLoad");
    }//GEN-LAST:event_jButtonLoadSubmitActionPerformed

    private void jButtonLoadNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadNameActionPerformed
        // TODO add your handling code here:

        jFileChooserLoad.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        jFileChooserLoad.setAcceptAllFileFilterUsed(true);        
        
        int returnVal = jFileChooserLoad.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            File file = jFileChooserLoad.getSelectedFile();
            String fileName = file.getName();
            String fileDir = file.getParent();
            jTextFieldLoadTextName.setText(fileName);
            jTextFieldLoadTextPath.setText(fileDir);
        }
        else
        {
            debugMsg("panelAuth:  VAULT FILE SELECTION CANCELLED");
        }
    }//GEN-LAST:event_jButtonLoadNameActionPerformed

    private void jButtonHomeUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHomeUpdateActionPerformed
        // TODO add your handling code here:
        try
        {
            if (!showConfirmUpdateEntry)
            {
                resetDeleteButton();
                resetSaveButton();
                resetCloseButton();
                
                if (jListHomeEntryList.getSelectedIndex() != -1)
                {
                    showConfirmUpdateEntry = true;
                    jButtonHomeUpdate.setText(updateButtonConfirmText);
                }
            }
            else
            {
                debugMsg("UPDATING SELECTED ITEM:  " + jListHomeEntryList.getSelectedIndex());
                VaultEntry entry = (VaultEntry) vaultListModelRef.getElementAt(jListHomeEntryList.getSelectedIndex());

                if (jTextFieldHomeEntryLabel.getText().length() < 1)
                {
                    entry.setLabel("[NO LABEL ENTERED]");
                    jTextFieldHomeEntryLabel.setText(entry.getLabel());
                }
                else
                {
                    entry.setLabel(jTextFieldHomeEntryLabel.getText());
                }


                if (jTextFieldHomeEntryUsername.getText().length() < 1)
                {
                    entry.setUsername("[NO USERNAME ENTERED]");
                    jTextFieldHomeEntryUsername.setText(entry.getUsername());
                }
                else
                {
                    entry.setUsername(jTextFieldHomeEntryUsername.getText());
                }


                if (jTextFieldHomeEntryPW.getText().length() < 1)
                {
                    entry.setPasswordAsStr("[NO PASSWORD ENTERED]");
                    jTextFieldHomeEntryPW.setText(entry.getPasswordAsStr());
                }
                else
                {
                    entry.setPasswordAsStr(jTextFieldHomeEntryPW.getText());
                }

//                entry.setLabel(jTextFieldHomeEntryLabel.getText());
//                entry.setUsername(jTextFieldHomeEntryUsername.getText());
//                entry.setPasswordAsStr(jTextFieldHomeEntryPW.getText());
                
                resetPanelHomeButtons();
            }
            
            
        }
        catch (ArrayIndexOutOfBoundsException ex)
        {
            debugMsg("INDEX ERROR:  " + jListHomeEntryList.getSelectedIndex());
        }

    }//GEN-LAST:event_jButtonHomeUpdateActionPerformed

    private void jButtonHomeSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHomeSaveActionPerformed
        // TODO add your handling code here:
            if (!showConfirmSaveVault)
            {
                resetUpdateButton();
                resetDeleteButton();
                resetCloseButton();
                
                showConfirmSaveVault = true;
                jButtonHomeSave.setText(saveButtonConfirmText);
            }
            else
            {
                resetPanelHomeButtons();
                saveVault();
            }
    }//GEN-LAST:event_jButtonHomeSaveActionPerformed

    private void jButtonHomeDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHomeDeleteActionPerformed
        // TODO add your handling code here:

        try
        {
            if (!showConfirmDeleteEntry)
            {
                resetUpdateButton();
                resetSaveButton();
                resetCloseButton();
                
                if (jListHomeEntryList.getSelectedIndex() != -1)
                {
                    showConfirmDeleteEntry = true;
                    jButtonHomeDelete.setText(deleteButtonConfirmText);
                }
            }
            else
            {
                debugMsg("DELETING SELECTED ITEM:  " + jListHomeEntryList.getSelectedIndex());
                VaultEntry entry = (VaultEntry) vaultListModelRef.getElementAt(jListHomeEntryList.getSelectedIndex());
                entry.delete();
                
                jTextFieldHomeEntryLabel.setText("");
                jTextFieldHomeEntryUsername.setText("");
                jTextFieldHomeEntryPW.setText("");

                
                resetPanelHomeButtons();
            }
        }
        catch (ArrayIndexOutOfBoundsException ex)
        {
            debugMsg("INDEX ERROR:  " + jListHomeEntryList.getSelectedIndex());
        }

    }//GEN-LAST:event_jButtonHomeDeleteActionPerformed

    private void jButtonLoadDirActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonLoadDirActionPerformed
    {//GEN-HEADEREND:event_jButtonLoadDirActionPerformed
        // TODO add your handling code here:
        jFileChooserLoad.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jFileChooserLoad.setAcceptAllFileFilterUsed(false);

        int returnVal = jFileChooserLoad.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            File file = jFileChooserLoad.getSelectedFile();
            jTextFieldLoadTextPath.setText(file.getAbsolutePath());
        }
        else
        {
            debugMsg("panelAuth:  VAULT FILE SELECTION CANCELLED");
        }

    }//GEN-LAST:event_jButtonLoadDirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAuthCancel;
    private javax.swing.JButton jButtonAuthChooseKeyfile;
    private javax.swing.JButton jButtonAuthSubmit;
    private javax.swing.JButton jButtonBaseExit;
    private javax.swing.JButton jButtonBaseNew;
    private javax.swing.JButton jButtonBaseOpen;
    private javax.swing.JButton jButtonFail;
    private javax.swing.JButton jButtonHomeAdd;
    private javax.swing.JButton jButtonHomeClose;
    private javax.swing.JButton jButtonHomeDelete;
    private javax.swing.JButton jButtonHomeSave;
    private javax.swing.JButton jButtonHomeUpdate;
    private javax.swing.JButton jButtonLoadCancel;
    private javax.swing.JButton jButtonLoadDir;
    private javax.swing.JButton jButtonLoadName;
    private javax.swing.JButton jButtonLoadSubmit;
    private javax.swing.JCheckBox jCheckBoxAuthUseKeyfile;
    private javax.swing.JFileChooser jFileChooserLoad;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelAuthKeyfilePath;
    private javax.swing.JLabel jLabelAuthPW;
    private javax.swing.JLabel jLabelBase;
    private javax.swing.JLabel jLabelFailReason;
    private javax.swing.JLabel jLabelHomeEntryLabel;
    private javax.swing.JLabel jLabelHomeEntryList;
    private javax.swing.JLabel jLabelHomeEntryPW;
    private javax.swing.JLabel jLabelHomeEntryUsername;
    private javax.swing.JLabel jLabelLoadTextName;
    private javax.swing.JLabel jLabelLoadTextPath;
    private javax.swing.JList<String> jListHomeEntryList;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuDebug;
    private javax.swing.JMenu jMenuDebugSelPanel;
    private javax.swing.JMenu jMenuDebugSetVar;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItemDebugSelPanelAuth;
    private javax.swing.JMenuItem jMenuItemDebugSelPanelFail;
    private javax.swing.JMenuItem jMenuItemDebugSelPanelHome;
    private javax.swing.JMenuItem jMenuItemDebugSelPanelLoad;
    private javax.swing.JMenuItem jMenuItemDebugSelPanelStore;
    private javax.swing.JMenuItem jMenuItemDebugSetVarOpenFalse;
    private javax.swing.JMenuItem jMenuItemDebugSetVarOpenTrue;
    private javax.swing.JMenuItem jMenuItemFileChPw;
    private javax.swing.JMenuItem jMenuItemFileClose;
    private javax.swing.JMenuItem jMenuItemFileExit;
    private javax.swing.JMenuItem jMenuItemFileLoad;
    private javax.swing.JMenuItem jMenuItemHelpAbout;
    private javax.swing.JMenuItem jMenuItemHelpHelp;
    private javax.swing.JPanel jPanelAuthButtons;
    private javax.swing.JPanel jPanelBase;
    private javax.swing.JPanel jPanelBaseButtons;
    private javax.swing.JPanel jPanelHomeButtons;
    private javax.swing.JPanel jPanelHomeTextFields;
    private javax.swing.JPanel jPanelLoadButtons;
    private javax.swing.JPanel jPanelLoadText;
    private javax.swing.JPasswordField jPasswordFieldAuthPW;
    private javax.swing.JScrollPane jScrollPaneHomeEntryList;
    private javax.swing.JPopupMenu.Separator jSeparatorMenuFile1;
    private javax.swing.JPopupMenu.Separator jSeparatorMenuFile2;
    private javax.swing.JPopupMenu.Separator jSeparatorMenuHelp1;
    private javax.swing.JTextField jTextFieldAuthKeyfilePath;
    private javax.swing.JTextField jTextFieldHomeEntryLabel;
    private javax.swing.JTextField jTextFieldHomeEntryPW;
    private javax.swing.JTextField jTextFieldHomeEntryUsername;
    private javax.swing.JTextField jTextFieldLoadTextName;
    private javax.swing.JTextField jTextFieldLoadTextPath;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel panelAuth;
    private javax.swing.JPanel panelFail;
    private javax.swing.JPanel panelHome;
    private javax.swing.JPanel panelLoad;
    // End of variables declaration//GEN-END:variables

    // CHANGES CARD IN mainPanel TO cardName   
    private void changeCard(String cardName)
    {
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, cardName);
        debugMsg("CHANGING TO CARD:  " + cardName);
    }

    // CHANGES CARD IN mainPanel TO cardName 
    // SETS goBackToCard to setGoBackToCardName
    private void changeCard(String cardName, String setGoBackToCardName)
    {
        goBackToCard = setGoBackToCardName;
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, cardName);
        debugMsg("CHANGING TO CARD:  " + cardName);
    }
    

    // DISPLAYS CUSTOM ERROR MESSAGE WITH BACK BUTTON
    private void showFailure(String reason, String goBackTo)
    {
        jLabelFailReason.setText(reason);
        goBackToCard = goBackTo;
        changeCard("panelFail");

    }

    
    
    private void tryOpenVault()
    {
        if (!isVaultOpen)
        {
            debugMsg("OPENING VAULT");

            vaultFilename = (jTextFieldLoadTextPath.getText() + File.separator + jTextFieldLoadTextName.getText());

            try
            {
                if (jCheckBoxAuthUseKeyfile.isSelected())
                {
                    // THROW EXCEPTION IF FILE INVALID
                    File file = new File(jTextFieldAuthKeyfilePath.getText());
                    FileInputStream keyFile = new FileInputStream(file);
                    
                    keyFile.close();

                    debugMsg("TRYING TO OPEN VAULT AT:  " + vaultFilename);

                    // TRY OPEN VAULT
                    vaultRef = new Vault(vaultFilename, getHash(jPasswordFieldAuthPW.getPassword(), jTextFieldAuthKeyfilePath.getText()));
                }
                else
                {
                    // TRY OPEN VAULT
                    vaultRef = new Vault(vaultFilename, getHash(jPasswordFieldAuthPW.getPassword()));
                }

                // RUN IF VAULT OPENED SUCCESSFULLY
                vaultListModelRef = new VaultListModel(vaultRef);
                jListHomeEntryList.setModel(vaultListModelRef);

                isVaultOpen = true;
                jMenuItemFileLoad.setEnabled(false);
                jMenuItemFileClose.setEnabled(true);
                jMenuItemFileChPw.setEnabled(true);
                
                changeCard("panelHome");
            }
            catch (UnrecoverableKeyException ex)
            {
                // EXCEPTION THROWN IF VAULT NOT AUTHENTICATED PROPERLY
                showFailure("AUTHENTICATION ERROR", "panelAuth");
                debugMsg("panelAuth:  AUTHENTICATION ERROR");
            }
            catch (IOException ex)
            {
                showFailure("panelAuth:  KEYFILE ERROR:  \n" + jTextFieldAuthKeyfilePath.getText(), "panelAuth");
                debugMsg("panelAuth:  KEYFILE ERROR:  " + jTextFieldAuthKeyfilePath.getText());
            }

            // RESET AUTH FIELDS
            resetAuthCard();

        }
    }

    private void resetAuthCard()
    {
        jTextFieldAuthKeyfilePath.setText(null);
        jPasswordFieldAuthPW.setText(null);
        jCheckBoxAuthUseKeyfile.setSelected(true);
    }

    private void resetLoadCard()
    {
        jTextFieldLoadTextName.setText(null);
        jTextFieldLoadTextPath.setText(null);
    }

    
    private void resetUpdateButton()
    {
        showConfirmUpdateEntry = false;
        jButtonHomeUpdate.setText(updateButtonText);
    }
    
    
    private void resetDeleteButton()
    {
        showConfirmDeleteEntry = false;
        jButtonHomeDelete.setText(deleteButtonText);
    }
    

    private void resetSaveButton()
    {
        showConfirmSaveVault = false;
        jButtonHomeSave.setText(saveButtonText);
    }

    
    private void resetCloseButton()
    {
        showConfirmCloseVault = false;
        jButtonHomeClose.setText(closeButtonText);
    }


    private void resetPanelHomeButtons()
    {
        resetUpdateButton();
        resetDeleteButton();
        resetSaveButton();
        resetCloseButton();
    }

       
    private void changePassword()
    {
        resetAuthCard();
        changeCard("panelAuth", "panelHome");
    }

    
    private void saveVault()
    {
        if (isVaultOpen)
        {
            debugMsg("SAVING VAULT");
            try
            {
                vaultRef.save();
            }
            catch (IOException ex)
            {
                showFailure("ERROR:  CANNOT SAVE VAULT", "panelHome");
            }
        }
    }

    private void closeVault()
    {
        if (isVaultOpen)
        {
            debugMsg("CLOSING VAULT");

            vaultRef = null;
            vaultListModelRef = null;

            resetLoadCard();

            isVaultOpen = false;
            doCreateNewVault = false;
            jMenuItemFileLoad.setEnabled(true);
            jMenuItemFileClose.setEnabled(false);
            jMenuItemFileChPw.setEnabled(false);
            
            changeCard("panelBase");
        }
    }

    private void exitProgram()
    {
        closeVault();
        debugMsg("PROGRAM EXECUTION TERMINATED");
        System.exit(0);
    }
}
